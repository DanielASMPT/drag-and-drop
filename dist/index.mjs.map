{"version":3,"sources":["../src/utils.ts","../src/plugins/animations/index.ts","../src/plugins/insertion/index.ts","../src/plugins/multiDrag/index.ts","../src/plugins/multiDrag/plugins/selections/index.ts","../src/plugins/place/index.ts","../src/plugins/swap/index.ts","../src/index.ts"],"sourcesContent":["import type {\n  EventHandlers,\n  Node,\n  NodeEventData,\n  NodeFromPoint,\n  NodeData,\n  ParentData,\n  ParentFromPoint,\n} from \"./types\";\n\nimport { nodes, parents } from \"./index\";\n\nexport function noDefault(e: Event) {\n  e.preventDefault();\n}\n\nexport function throttle(callback: any, limit: number) {\n  var wait = false;\n  return function (...args: any[]) {\n    if (!wait) {\n      callback.call(null, ...args);\n      wait = true;\n      setTimeout(function () {\n        wait = false;\n      }, limit);\n    }\n  };\n}\n\nfunction splitClass(className: string): Array<string> {\n  return className.split(\" \").filter((x) => x);\n}\n\n/**\n * Check to see if code is running in a browser.\n *\n * @internal\n */\nexport const isBrowser = typeof window !== \"undefined\";\n\nexport function addNodeClass<T>(\n  els: Array<Node | HTMLElement | Element>,\n  className: string | undefined,\n  omitAppendPrivateClass = false\n) {\n  function nodeSetter<T>(node: Node, nodeData: NodeData<T>) {\n    nodes.set(node, nodeData);\n  }\n\n  for (const el of els) {\n    const nodeData = nodes.get(el as Node);\n\n    const newData = addClass(el, className, nodeData, omitAppendPrivateClass);\n\n    if (!newData) continue;\n\n    nodeSetter(el as Node, newData as NodeData<T>);\n  }\n}\n\nexport function addParentClass<T>(\n  els: Array<HTMLElement>,\n  className: string | undefined,\n  omitAppendPrivateClass = false\n) {\n  function parentSetter<T>(parent: HTMLElement, parentData: ParentData<T>) {\n    parents.set(parent, parentData);\n  }\n\n  for (const el of els) {\n    const parentData = parents.get(el);\n\n    const newData = addClass(el, className, parentData, omitAppendPrivateClass);\n\n    if (!newData) continue;\n\n    parentSetter(el, newData as ParentData<T>);\n  }\n}\n\nexport function addClass(\n  el: Node | HTMLElement | Element,\n  className: string | undefined,\n  data: NodeData<any> | ParentData<any> | undefined,\n  omitAppendPrivateClass = false\n) {\n  if (!className) return;\n\n  const classNames = splitClass(className);\n\n  if (!classNames.length) return;\n\n  if (classNames.includes(\"longPress\")) return;\n\n  if (!data) {\n    el.classList.add(...classNames);\n\n    return;\n  }\n\n  const privateClasses = [];\n\n  for (const className of classNames) {\n    if (!el.classList.contains(className)) {\n      el.classList.add(className);\n    } else if (\n      el.classList.contains(className) &&\n      omitAppendPrivateClass === false\n    ) {\n      privateClasses.push(className);\n    }\n  }\n\n  data.privateClasses = privateClasses;\n\n  return data;\n}\n\nexport function removeClass(\n  els: Array<Node | HTMLElement | Element>,\n  className: string | undefined\n) {\n  if (!className) return;\n\n  const classNames = splitClass(className);\n\n  if (!classNames.length) return;\n\n  for (const node of els) {\n    if (!isNode(node)) {\n      node.classList.remove(...classNames);\n      continue;\n    }\n\n    const nodeData = nodes.get(node) || parents.get(node);\n\n    if (!nodeData) continue;\n\n    for (const className of classNames) {\n      if (!nodeData.privateClasses.includes(className)) {\n        node.classList.remove(className);\n      }\n    }\n  }\n}\n\n/**\n * Used for getting the closest scrollable parent of a given element.\n *\n * @param node - The element to get the closest scrollable parent of.\n *\n * @internal\n */\nexport function getScrollParent(childNode: HTMLElement): HTMLElement {\n  let parentNode = childNode.parentNode;\n\n  while (\n    parentNode !== null &&\n    parentNode.nodeType === 1 &&\n    parentNode instanceof HTMLElement\n  ) {\n    const computedStyle = window.getComputedStyle(parentNode);\n\n    const overflow = computedStyle.getPropertyValue(\"overflow\");\n\n    if (overflow === \"scroll\" || overflow === \"auto\") return parentNode;\n\n    parentNode = parentNode.parentNode;\n  }\n\n  return document.documentElement;\n}\n/**\n * Used for setting a single event listener on x number of events for a given\n * element.\n *\n * @param el - The element to set the event listener on.\n *\n * @param events - An array of events to set the event listener on.\n *\n * @param fn - The function to run when the event is triggered.\n *\n * @param remove - Whether or not to remove the event listener.\n *\n * @internal\n */\nexport function events(\n  el: Node | HTMLElement,\n  events: Array<string>,\n  fn: any,\n  remove = false\n) {\n  events.forEach((event) => {\n    remove ? el.removeEventListener(event, fn) : el.addEventListener(event, fn);\n  });\n}\n\nexport function getElFromPoint<T>(\n  eventData: NodeEventData<T>\n): NodeFromPoint<T> | ParentFromPoint<T> | undefined {\n  if (!(eventData.e instanceof PointerEvent)) return;\n\n  const newX = eventData.e.clientX;\n\n  const newY = eventData.e.clientY;\n\n  let target = document.elementFromPoint(newX, newY);\n\n  if (!isNode(target)) return;\n\n  let isParent;\n\n  let invalidEl = true;\n\n  while (target && invalidEl) {\n    if (nodes.has(target as Node) || parents.has(target as HTMLElement)) {\n      invalidEl = false;\n\n      isParent = parents.has(target as HTMLElement);\n\n      break;\n    }\n\n    target = target.parentNode as Node;\n  }\n\n  if (!isParent) {\n    const targetNodeData = nodes.get(target as Node);\n\n    if (!targetNodeData) return;\n\n    const targetParentData = parents.get(target.parentNode as Node);\n\n    if (!targetParentData) return;\n\n    return {\n      node: {\n        el: target as Node,\n        data: targetNodeData,\n      },\n      parent: {\n        el: target.parentNode as Node,\n        data: targetParentData as ParentData<T>,\n      },\n    };\n  } else {\n    const parentData = parents.get(target as HTMLElement);\n\n    if (!parentData) return;\n\n    return {\n      parent: {\n        el: target as HTMLElement,\n        data: parentData as ParentData<T>,\n      },\n    };\n  }\n}\n\n/**\n * Checks to see that a given element and its parent node are instances of\n * HTML Elements.\n *\n * @param {unknown} el - The element to check.\n *\n * @returns {boolean} - Whether or not provided element is of type Node.\n */\nexport function isNode(el: unknown): el is Node {\n  return el instanceof HTMLElement && el.parentNode instanceof HTMLElement;\n}\n\n/**\n * Takes a given el and event handlers, assigns them, and returns the used abort\n * controller.\n *\n * @param el - The element to add the event listeners to.\n * @param events - The events to add to the element.\n * @returns - The abort controller used for the event listeners.\n */\nexport function addEvents(\n  el: Document | ShadowRoot | Node | HTMLElement,\n  events: EventHandlers | any\n): AbortController {\n  const abortController = new AbortController();\n  for (const eventName in events) {\n    const handler = events[eventName];\n    el.addEventListener(eventName, handler, {\n      signal: abortController.signal,\n      passive: false,\n    });\n  }\n  return abortController;\n}\n\nexport function copyNodeStyle(\n  sourceNode: Node,\n  targetNode: Node,\n  omitKeys = false\n) {\n  const computedStyle = window.getComputedStyle(sourceNode);\n\n  const omittedKeys = [\n    \"position\",\n    \"z-index\",\n    \"top\",\n    \"left\",\n    \"x\",\n    \"pointer-events\",\n    \"y\",\n    \"transform-origin\",\n    \"filter\",\n    \"-webkit-text-fill-color\",\n  ];\n\n  for (const key of Array.from(computedStyle)) {\n    if (omitKeys === false && key && omittedKeys.includes(key)) continue;\n\n    targetNode.style.setProperty(\n      key,\n      computedStyle.getPropertyValue(key),\n      computedStyle.getPropertyPriority(key)\n    );\n  }\n\n  for (const child of Array.from(sourceNode.children)) {\n    if (!isNode(child)) continue;\n\n    const targetChild = targetNode.children[\n      Array.from(sourceNode.children).indexOf(child)\n    ] as Node;\n\n    copyNodeStyle(child, targetChild, omitKeys);\n  }\n}\n\nexport function eventCoordinates(data: DragEvent | PointerEvent) {\n  return { x: data.clientX, y: data.clientY };\n}\n","import type { SetupNodeData, Node } from \"../../types\";\nimport type { AnimationsConfig } from \"./types\";\nimport { state, parents } from \"../../index\";\n\nexport function animations(animationsConfig: Partial<AnimationsConfig> = {}) {\n  const slideUp = [\n    {\n      transform: `translateY(${animationsConfig.yScale || 50}%)`,\n    },\n    {\n      transform: `translateY(${animationsConfig.yScale || 0}%)`,\n    },\n  ];\n\n  const slideDown = [\n    {\n      transform: `translateY(-${animationsConfig.yScale || 50}%)`,\n    },\n    {\n      transform: `translateY(${animationsConfig.yScale || 0}%)`,\n    },\n  ];\n\n  const slideLeft = [\n    {\n      transform: `translateX(${animationsConfig.xScale || 50}%)`,\n    },\n    {\n      transform: `translateX(${animationsConfig.xScale || 0}%)`,\n    },\n  ];\n\n  const slideRight = [\n    {\n      transform: `translateX(-${animationsConfig.xScale || 50}%)`,\n    },\n    {\n      transform: `translateX(${animationsConfig.xScale || 0}%)`,\n    },\n  ];\n  return (parent: HTMLElement) => {\n    const parentData = parents.get(parent);\n\n    if (!parentData) return;\n\n    return {\n      setup() {\n        if (document.head.querySelector(\"[data-drag-and-drop]\")) return;\n      },\n\n      setupNodeRemap<T>(data: SetupNodeData<T>) {\n        if (!state) return;\n\n        const duration = animationsConfig.duration || 150;\n\n        if (data.nodeData.value === state.draggedNode.data.value) {\n          switch (state.incomingDirection) {\n            case \"below\":\n              animate(data.node, slideUp, duration);\n\n              break;\n            case \"above\":\n              animate(data.node, slideDown, duration);\n\n              break;\n            case \"left\":\n              animate(data.node, slideRight, duration);\n\n              break;\n            case \"right\":\n              animate(data.node, slideLeft, duration);\n\n              break;\n          }\n\n          return;\n        }\n\n        if (\n          !state.affectedNodes\n            .map((x) => x.data.value)\n            .includes(data.nodeData.value)\n        )\n          return;\n\n        const nodeRect = data.node.getBoundingClientRect();\n\n        const nodeIndex = state.affectedNodes.findIndex(\n          (x) => x.data.value === data.nodeData.value\n        );\n\n        const draggedNodeIndex = state.draggedNode.data.index;\n\n        const ascendingDirection = draggedNodeIndex >= state.targetIndex;\n\n        let adjacentNode;\n\n        if (ascendingDirection) {\n          adjacentNode = state.affectedNodes[nodeIndex + 1]\n            ? state.affectedNodes[nodeIndex + 1]\n            : state.affectedNodes[nodeIndex - 1];\n        } else {\n          adjacentNode = state.affectedNodes[nodeIndex - 1]\n            ? state.affectedNodes[nodeIndex - 1]\n            : state.affectedNodes[nodeIndex + 1];\n        }\n\n        if (adjacentNode) {\n          const xDiff = Math.abs(\n            nodeRect.x - adjacentNode.el.getBoundingClientRect().x\n          );\n\n          const yDiff = Math.abs(\n            nodeRect.y - adjacentNode.el.getBoundingClientRect().y\n          );\n\n          if (xDiff > yDiff && ascendingDirection) {\n            animate(data.node, slideRight, duration);\n          } else if (xDiff > yDiff && !ascendingDirection) {\n            animate(data.node, slideLeft, duration);\n          }\n        } else {\n          switch (state.incomingDirection) {\n            case \"below\":\n              animate(data.node, slideDown, duration);\n\n              break;\n            case \"above\":\n              animate(data.node, slideUp, duration);\n\n              break;\n            case \"left\":\n              animate(data.node, slideLeft, duration);\n\n              break;\n            case \"right\":\n              animate(data.node, slideRight, duration);\n\n              break;\n          }\n        }\n      },\n    };\n  };\n}\n\nfunction animate(\n  node: Node,\n  animation: Keyframe[] | PropertyIndexedKeyframes,\n  duration: number\n) {\n  if (!state) return;\n\n  state.preventEnter = true;\n\n  node.animate(animation, {\n    duration: duration,\n  });\n\n  setTimeout(() => {\n    if (!state) return;\n\n    state.preventEnter = false;\n  }, duration);\n}\n","import type {\n  DragState,\n  NodeDragEventData,\n  NodeRecord,\n  ParentConfig,\n  ParentEventData,\n  NodePointerEventData,\n  PointeroverParentEvent,\n  ParentRecord,\n} from \"../../types\";\nimport {\n  dragstart,\n  handleScroll,\n  handleEnd as originalHandleEnd,\n  parents,\n  parentValues,\n  setParentValues,\n  state,\n  addParentClass,\n  pointerdown,\n} from \"../../index\";\n\nimport { eventCoordinates, removeClass } from \"../../utils\";\n\nexport const insertionState = {\n  draggedOverNodes: Array<NodeRecord<any>>(),\n  draggedOverParent: null as ParentRecord<any> | null,\n  targetIndex: 0,\n  ascending: false,\n};\n\ninterface InsertionConfig<T> extends ParentConfig<T> {}\n\n// WIP: This is a work in progress and not yet fully functional\nexport function insertion<T>(\n  insertionConfig: Partial<InsertionConfig<T>> = {}\n) {\n  return (parent: HTMLElement) => {\n    const parentData = parents.get(parent);\n\n    if (!parentData) return;\n\n    const insertionParentConfig = {\n      ...parentData.config,\n      insertionConfig: insertionConfig,\n    } as InsertionConfig<T>;\n\n    return {\n      teardown() {\n        if (parentData.abortControllers.root) {\n          parentData.abortControllers.root.abort();\n        }\n      },\n      setup() {\n        insertionParentConfig.handleDragstart =\n          insertionConfig.handleDragstart || handleDragstart;\n\n        insertionParentConfig.handleDragoverNode =\n          insertionConfig.handleDragoverNode || handleDragoverNode;\n\n        insertionParentConfig.handlePointeroverParent =\n          insertionConfig.handlePointeroverParent || handlePointeroverParent;\n\n        insertionParentConfig.handlePointeroverNode =\n          insertionConfig.handlePointeroverNode || handlePointeroverParent;\n\n        insertionParentConfig.handleDragoverParent =\n          insertionConfig.handleDragoverParent || handleDragoverParent;\n\n        insertionParentConfig.handleEnd =\n          insertionConfig.handleEnd || handleEnd;\n\n        document.body.addEventListener(\"dragover\", checkPosition);\n\n        document.body.addEventListener(\"pointermove\", checkPosition);\n\n        const observer = new ResizeObserver(() => {\n          defineRanges(parent);\n        });\n\n        observer.observe(parent);\n\n        parentData.config = insertionParentConfig;\n\n        if (parentData.config.sortable === false) return;\n\n        const div = document.createElement(\"div\");\n\n        div.id = \"insertion-point\";\n\n        div.classList.add(\n          \"absolute\",\n          \"bg-blue-500\",\n          \"z-[1000]\",\n          \"rounded-full\",\n          \"duration-[5ms]\",\n          \"before:block\",\n          'before:content-[\"Insert\"]',\n          \"before:whitespace-nowrap\",\n          \"before:block\",\n          \"before:bg-blue-500\",\n          \"before:py-1\",\n          \"before:px-2\",\n          \"before:rounded-full\",\n          \"before:text-xs\",\n          \"before:absolute\",\n          \"before:top-1/2\",\n          \"before:left-1/2\",\n          \"before:-translate-y-1/2\",\n          \"before:-translate-x-1/2\",\n          \"before:text-white\",\n          \"before:text-xs\"\n        );\n\n        div.style.display = \"none\";\n\n        document.body.appendChild(div);\n\n        window.addEventListener(\"scroll\", defineRanges.bind(null, parent));\n\n        window.addEventListener(\"resize\", defineRanges.bind(null, parent));\n      },\n\n      remapFinished() {\n        defineRanges(parent);\n      },\n    };\n  };\n}\n\nfunction checkPosition(e: DragEvent | PointerEvent) {\n  if (!state) return;\n\n  const el = document.elementFromPoint(e.clientX, e.clientY);\n\n  if (!(el instanceof HTMLElement)) return;\n\n  if (!parents.has(el)) {\n    const insertionPoint = document.getElementById(\"insertion-point\");\n\n    if (insertionPoint && insertionPoint === el) return;\n\n    if (insertionPoint) insertionPoint.style.display = \"none\";\n\n    if (insertionState.draggedOverParent) {\n      removeClass(\n        [insertionState.draggedOverParent.el],\n        insertionState.draggedOverParent.data.config.dropZoneClass\n      );\n    }\n\n    insertionState.draggedOverNodes = [];\n\n    insertionState.draggedOverParent = null;\n  }\n}\n\nexport function handleDragstart<T>(data: NodeDragEventData<T>) {\n  if (!(data.e instanceof DragEvent)) return;\n\n  dragstart({\n    e: data.e,\n    targetData: data.targetData,\n  });\n\n  setTimeout(() => {\n    if (data.targetData.parent.data.config.sortable === false) return;\n\n    defineRanges(data.targetData.parent.el);\n  });\n}\n\nexport function handlePointerdown<T>(data: NodePointerEventData<T>) {\n  if (!(data.e instanceof PointerEvent)) return;\n\n  pointerdown({\n    e: data.e,\n    targetData: data.targetData,\n  });\n\n  setTimeout(() => {\n    if (data.targetData.parent.data.config.sortable === false) return;\n\n    defineRanges(data.targetData.parent.el);\n  });\n}\n\nfunction ascendingVertical(\n  nodeCoords: Coordinates,\n  nextNodeCoords?: Coordinates\n) {\n  const center = nodeCoords.top + nodeCoords.height / 2;\n\n  if (!nextNodeCoords) {\n    return {\n      y: [center, center + nodeCoords.height / 2 + 10],\n      x: [nodeCoords.left, nodeCoords.right],\n      vertical: true,\n    };\n  }\n\n  return {\n    y: [\n      center,\n      nodeCoords.bottom + Math.abs(nodeCoords.bottom - nextNodeCoords.top) / 2,\n    ],\n    x: [nodeCoords.left, nodeCoords.right],\n    vertical: true,\n  };\n}\n\nfunction descendingVertical(\n  nodeCoords: Coordinates,\n  prevNodeCoords?: Coordinates\n) {\n  const center = nodeCoords.top + nodeCoords.height / 2;\n\n  if (!prevNodeCoords) {\n    return {\n      y: [center - nodeCoords.height / 2 - 10, center],\n      x: [nodeCoords.left, nodeCoords.right],\n      vertical: true,\n    };\n  }\n\n  return {\n    y: [\n      prevNodeCoords.bottom +\n        Math.abs(prevNodeCoords.bottom - nodeCoords.top) / 2,\n      center,\n    ],\n    x: [nodeCoords.left, nodeCoords.right],\n    vertical: true,\n  };\n}\n\nfunction ascendingHorizontal(\n  nodeCoords: Coordinates,\n  nextNodeCoords?: Coordinates,\n  lastInRow = false\n) {\n  const center = nodeCoords.left + nodeCoords.width / 2;\n\n  if (!nextNodeCoords) {\n    return {\n      x: [center, center + nodeCoords.width],\n      y: [nodeCoords.top, nodeCoords.bottom],\n      vertical: false,\n    };\n  }\n\n  if (lastInRow) {\n    return {\n      x: [center, nodeCoords.right + 10],\n      y: [nodeCoords.top, nodeCoords.bottom],\n      vertical: false,\n    };\n  } else {\n    const nextNodeCenter = nextNodeCoords.left + nextNodeCoords.width / 2;\n\n    return {\n      x: [center, center + Math.abs(center - nextNodeCenter) / 2],\n      y: [nodeCoords.top, nodeCoords.bottom],\n      vertical: false,\n    };\n  }\n}\n\nfunction descendingHorizontal(\n  nodeCoords: Coordinates,\n  prevNodeCoords?: Coordinates\n) {\n  const center = nodeCoords.left + nodeCoords.width / 2;\n\n  if (!prevNodeCoords) {\n    return {\n      x: [nodeCoords.left - 10, center],\n      y: [nodeCoords.top, nodeCoords.bottom],\n      vertical: false,\n    };\n  }\n\n  return {\n    x: [\n      prevNodeCoords.right +\n        Math.abs(prevNodeCoords.right - nodeCoords.left) / 2,\n      center,\n    ],\n    y: [nodeCoords.top, nodeCoords.bottom],\n    vertical: false,\n  };\n}\n\ninterface Coordinates {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\nfunction getRealCoords(el: HTMLElement): Coordinates {\n  const { top, bottom, left, right, height, width } =\n    el.getBoundingClientRect();\n\n  const scrollLeft = window.scrollX || document.documentElement.scrollLeft;\n  const scrollTop = window.scrollY || document.documentElement.scrollTop;\n\n  const adjustedTop = top + scrollTop;\n  const adjustedBottom = bottom + scrollTop;\n  const adjustedLeft = left + scrollLeft;\n  const adjustedRight = right + scrollLeft;\n\n  return {\n    top: adjustedTop,\n    bottom: adjustedBottom,\n    left: adjustedLeft,\n    right: adjustedRight,\n    height,\n    width,\n  };\n}\n\nfunction defineRanges(parent: HTMLElement) {\n  const parentData = parents.get(parent);\n\n  if (!parentData) return;\n\n  const enabledNodes = parentData.enabledNodes;\n\n  enabledNodes.forEach((node, index) => {\n    node.data.range = {};\n\n    let aboveOrBelowPrevious = false;\n\n    let aboveOrBelowAfter = false;\n\n    let prevNodeCoords = undefined;\n\n    let nextNodeCoords = undefined;\n\n    if (enabledNodes[index - 1])\n      prevNodeCoords = getRealCoords(enabledNodes[index - 1].el);\n\n    if (enabledNodes[index + 1])\n      nextNodeCoords = getRealCoords(enabledNodes[index + 1].el);\n\n    const nodeCoords = getRealCoords(node.el);\n\n    if (prevNodeCoords) {\n      aboveOrBelowPrevious =\n        nodeCoords.top > prevNodeCoords.bottom ||\n        nodeCoords.bottom < prevNodeCoords.top;\n    }\n\n    if (nextNodeCoords) {\n      aboveOrBelowAfter =\n        nodeCoords.top > nextNodeCoords.bottom ||\n        nodeCoords.bottom < nextNodeCoords.top;\n    }\n\n    const fullishWidth =\n      parent.getBoundingClientRect().width * 0.8 < nodeCoords.width;\n\n    if (fullishWidth) {\n      node.data.range.ascending = ascendingVertical(nodeCoords, nextNodeCoords);\n      node.data.range.descending = descendingVertical(\n        nodeCoords,\n        prevNodeCoords\n      );\n    } else if (aboveOrBelowAfter && !aboveOrBelowPrevious) {\n      node.data.range.ascending = ascendingHorizontal(\n        nodeCoords,\n        nextNodeCoords,\n        true\n      );\n      node.data.range.descending = descendingHorizontal(\n        nodeCoords,\n        prevNodeCoords\n      );\n    } else if (!aboveOrBelowPrevious && !aboveOrBelowAfter) {\n      node.data.range.ascending = ascendingHorizontal(\n        nodeCoords,\n        nextNodeCoords\n      );\n      node.data.range.descending = descendingHorizontal(\n        nodeCoords,\n        prevNodeCoords\n      );\n    } else if (aboveOrBelowPrevious && !nextNodeCoords) {\n      node.data.range.ascending = ascendingHorizontal(nodeCoords);\n    } else if (aboveOrBelowPrevious && !aboveOrBelowAfter) {\n      node.data.range.ascending = ascendingHorizontal(\n        nodeCoords,\n        nextNodeCoords\n      );\n\n      node.data.range.descending = descendingHorizontal(nodeCoords);\n    }\n  });\n}\n\nexport function handleDragoverNode<T>(data: NodeDragEventData<T>) {\n  data.e.preventDefault();\n}\n\nexport function handleDragoverParent<T>(data: ParentEventData<T>) {\n  if (!state || !insertionState) return;\n\n  data.e.stopPropagation();\n\n  data.e.preventDefault();\n\n  const { x, y } = eventCoordinates(data.e as DragEvent | PointerEvent);\n\n  // Get the client coordinates\n  const clientX = x;\n  const clientY = y;\n\n  // Get the scroll positions\n  const scrollLeft = window.scrollX || document.documentElement.scrollLeft;\n  const scrollTop = window.scrollY || document.documentElement.scrollTop;\n\n  // Calculate the coordinates relative to the entire document\n  state.coordinates.x = clientX + scrollLeft;\n  state.coordinates.y = clientY + scrollTop;\n\n  const nestedParent = data.targetData.parent.data.nestedParent;\n\n  let realTargetParent = data.targetData.parent;\n\n  if (nestedParent) {\n    const rect = nestedParent.el.getBoundingClientRect();\n\n    if (state.coordinates.y > rect.top && state.coordinates.y < rect.bottom)\n      realTargetParent = nestedParent;\n  }\n\n  realTargetParent.el === state.lastParent?.el\n    ? moveBetween(realTargetParent)\n    : moveOutside(realTargetParent, state);\n}\n\nexport function moveBetween<T>(data: ParentRecord<T>) {\n  if (data.data.config.sortable === false) return;\n\n  if (\n    data.el === insertionState.draggedOverParent?.el &&\n    insertionState.draggedOverParent.data.getValues(data.el).length === 0\n  ) {\n    return;\n  } else if (insertionState.draggedOverParent?.el) {\n    removeClass(\n      [insertionState.draggedOverParent.el],\n      insertionState.draggedOverParent.data.config.dropZoneClass\n    );\n    insertionState.draggedOverParent = null;\n  }\n\n  const foundRange = findClosest(data.data.enabledNodes);\n\n  if (!foundRange) return;\n\n  const position = foundRange[0].data.range[foundRange[1]];\n\n  positionInsertionPoint(\n    position,\n    foundRange[1] === \"ascending\",\n    foundRange[0]\n  );\n}\n\nfunction moveOutside<T>(data: ParentRecord<T>, state: DragState<T>) {\n  if (data.el === state.lastParent.el) return false;\n\n  const targetConfig = data.data.config;\n\n  if (targetConfig.treeGroup && state.draggedNode.el.contains(data.el))\n    return false;\n\n  if (targetConfig.dropZone === false) return false;\n\n  const initialParentConfig = state.initialParent.data.config;\n\n  if (targetConfig.accepts) {\n    return targetConfig.accepts(\n      data,\n      state.initialParent,\n      state.lastParent,\n      state\n    );\n  } else if (\n    !targetConfig.group ||\n    targetConfig.group !== initialParentConfig.group\n  ) {\n    return false;\n  }\n\n  const values = data.data.getValues(data.el);\n\n  if (!values.length) {\n    addParentClass([data.el], targetConfig.dropZoneClass);\n\n    insertionState.draggedOverParent = data;\n\n    const insertionPoint = document.getElementById(\"insertion-point\");\n\n    if (insertionPoint) insertionPoint.style.display = \"none\";\n  } else {\n    removeClass([state.lastParent.el], targetConfig.dropZoneClass);\n\n    const enabledNodes = data.data.enabledNodes;\n\n    const foundRange = findClosest(enabledNodes);\n\n    if (!foundRange) return;\n\n    const position = foundRange[0].data.range[foundRange[1]];\n\n    positionInsertionPoint(\n      position,\n      foundRange[1] === \"ascending\",\n      foundRange[0]\n    );\n  }\n\n  state.lastParent = data;\n}\n\nfunction findClosest<T>(enabledNodes: NodeRecord<T>[]) {\n  let foundRange: [NodeRecord<T>, string] | null = null;\n\n  for (let x = 0; x < enabledNodes.length; x++) {\n    if (!state || !enabledNodes[x].data.range) continue;\n\n    if (enabledNodes[x].data.range.ascending) {\n      if (\n        state.coordinates.y > enabledNodes[x].data.range.ascending.y[0] &&\n        state.coordinates.y < enabledNodes[x].data.range.ascending.y[1] &&\n        state.coordinates.x > enabledNodes[x].data.range.ascending.x[0] &&\n        state.coordinates.x < enabledNodes[x].data.range.ascending.x[1]\n      ) {\n        foundRange = [enabledNodes[x], \"ascending\"];\n\n        return foundRange;\n      }\n    }\n\n    if (enabledNodes[x].data.range.descending) {\n      if (\n        state.coordinates.y > enabledNodes[x].data.range.descending.y[0] &&\n        state.coordinates.y < enabledNodes[x].data.range.descending.y[1] &&\n        state.coordinates.x > enabledNodes[x].data.range.descending.x[0] &&\n        state.coordinates.x < enabledNodes[x].data.range.descending.x[1]\n      ) {\n        foundRange = [enabledNodes[x], \"descending\"];\n\n        return foundRange;\n      }\n    }\n  }\n}\n\nexport function handlePointeroverParent<T>(data: PointeroverParentEvent<T>) {\n  if (!state || !insertionState) return;\n\n  data.detail.e.stopPropagation();\n\n  const { x, y } = eventCoordinates(data.detail.e as PointerEvent);\n\n  state.coordinates.y = y;\n\n  state.coordinates.x = x;\n\n  handleScroll();\n\n  const nestedParent = data.detail.targetData.parent.data.nestedParent;\n\n  let realTargetParent = data.detail.targetData.parent;\n\n  if (nestedParent) {\n    const rect = nestedParent.el.getBoundingClientRect();\n\n    if (state.coordinates.y > rect.top && state.coordinates.y < rect.bottom)\n      realTargetParent = nestedParent;\n  }\n\n  const enabledNodes = realTargetParent.data.enabledNodes;\n\n  const foundRange = findClosest(enabledNodes);\n\n  if (!foundRange) return;\n\n  const position = foundRange[0].data.range[foundRange[1]];\n\n  positionInsertionPoint(\n    position,\n    foundRange[1] === \"ascending\",\n    foundRange[0]\n  );\n\n  data.detail.targetData.parent.el === state.lastParent?.el\n    ? moveBetween(realTargetParent)\n    : moveOutside(realTargetParent, state);\n}\n\nfunction positionInsertionPoint<T>(\n  position: { x: number[]; y: number[]; vertical: boolean },\n  ascending: boolean,\n  node: NodeRecord<T>\n) {\n  if (!state) return;\n\n  const div = document.getElementById(\"insertion-point\");\n\n  if (!div) return;\n\n  insertionState.draggedOverNodes = [node];\n\n  if (position.vertical) {\n    const topPosition =\n      position.y[ascending ? 1 : 0] - div.getBoundingClientRect().height / 2;\n\n    div.style.top = `${topPosition}px`;\n\n    const leftCoordinate = position.x[0];\n\n    const rightCoordinate = position.x[1];\n\n    div.style.left = `${leftCoordinate}px`;\n\n    div.style.right = `${rightCoordinate}px`;\n\n    div.style.height = \"4px\";\n\n    div.style.width = rightCoordinate - leftCoordinate + \"px\";\n  } else {\n    const leftPosition =\n      position.x[ascending ? 1 : 0] - div.getBoundingClientRect().width / 2;\n    div.style.left = `${leftPosition}px`;\n\n    const topCoordinate = position.y[0];\n\n    const bottomCoordinate = position.y[1];\n\n    div.style.top = `${topCoordinate}px`;\n\n    div.style.bottom = `${bottomCoordinate}px`;\n\n    div.style.width = \"4px\";\n\n    div.style.height = bottomCoordinate - topCoordinate + \"px\";\n  }\n\n  insertionState.targetIndex = node.data.index;\n\n  insertionState.ascending = ascending;\n\n  div.style.display = \"block\";\n}\n\nexport function handleParentDrop<T>(_data: NodeDragEventData<T>) {}\n\nexport function handleEnd<T>(\n  data: NodeDragEventData<T> | NodePointerEventData<T>\n) {\n  data.e.stopPropagation();\n\n  if (!state) return;\n\n  const insertionPoint = document.getElementById(\"insertion-point\");\n\n  if (!insertionState.draggedOverParent) {\n    const draggedParentValues = parentValues(\n      state.initialParent.el,\n      state.initialParent.data\n    );\n\n    const transferred = state.initialParent.el !== state.lastParent.el;\n\n    const draggedValues = state.draggedNodes.map((node) => node.data.value);\n\n    const enabledNodes = [...data.targetData.parent.data.enabledNodes];\n\n    const originalIndex = state.draggedNodes[0].data.index;\n\n    if (\n      !transferred &&\n      insertionState.draggedOverNodes[0] &&\n      insertionState.draggedOverNodes[0].el !== state.draggedNodes[0].el\n    ) {\n      const newParentValues = [\n        ...draggedParentValues.filter((x) => !draggedValues.includes(x)),\n      ];\n\n      let index = insertionState.draggedOverNodes[0].data.index;\n\n      if (\n        insertionState.targetIndex > state.draggedNodes[0].data.index &&\n        !insertionState.ascending\n      ) {\n        index--;\n      } else if (\n        insertionState.targetIndex < state.draggedNodes[0].data.index &&\n        insertionState.ascending\n      ) {\n        index++;\n      }\n\n      newParentValues.splice(index, 0, ...draggedValues);\n\n      setParentValues(data.targetData.parent.el, data.targetData.parent.data, [\n        ...newParentValues,\n      ]);\n\n      if (data.targetData.parent.data.config.onSort) {\n        const sortEventData = {\n          parent: {\n            el: data.targetData.parent.el,\n            data: data.targetData.parent.data,\n          },\n          previousValues: [...draggedParentValues],\n          previousNodes: [...enabledNodes],\n          nodes: [...data.targetData.parent.data.enabledNodes],\n          values: [...newParentValues],\n          draggedNode: state.draggedNode,\n          previousPosition: originalIndex,\n          position: index,\n        };\n\n        data.targetData.parent.data.config.onSort(sortEventData);\n      }\n    } else if (transferred && insertionState.draggedOverNodes.length) {\n      const targetParentValues = parentValues(\n        state.lastParent.el,\n        state.lastParent.data\n      );\n      const draggedParentValues = parentValues(\n        state.initialParent.el,\n        state.initialParent.data\n      );\n\n      // For the time being, we will not be remoing the value of the original dragged parent.\n      let index = insertionState.draggedOverNodes[0].data.index || 0;\n\n      if (insertionState.ascending) index++;\n\n      const insertValues = state.dynamicValues.length\n        ? state.dynamicValues\n        : draggedValues;\n      targetParentValues.splice(index, 0, ...insertValues);\n      setParentValues(state.lastParent.el, state.lastParent.data, [\n        ...targetParentValues,\n      ]);\n      draggedParentValues.splice(state.initialIndex, draggedValues.length);\n      setParentValues(state.initialParent.el, state.initialParent.data, [\n        ...draggedParentValues,\n      ]);\n\n      const transferEventData = {\n        sourceParent: state.lastParent,\n        targetParent: data.targetData.parent,\n        previousSourceValues: [...targetParentValues],\n        sourceValues: [...state.lastParent.data.getValues(state.lastParent.el)],\n        previousTargetValues: [...targetParentValues],\n        targetValues: [\n          ...data.targetData.parent.data.getValues(data.targetData.parent.el),\n        ],\n        previousSourceNodes: [...state.lastParent.data.enabledNodes],\n        sourceNodes: [...state.lastParent.data.enabledNodes],\n        previousTargetNodes: [...data.targetData.parent.data.enabledNodes],\n        targetNodes: [...data.targetData.parent.data.enabledNodes],\n        draggedNode: state.draggedNode,\n        sourcePreviousPosition: state.initialIndex,\n        targetPosition: index,\n      };\n      if (data.targetData.parent.data.config.onTransfer)\n        data.targetData.parent.data.config.onTransfer(transferEventData);\n      if (state.lastParent.data.config.onTransfer)\n        state.lastParent.data.config.onTransfer(transferEventData);\n    }\n  } else if (insertionState.draggedOverParent) {\n    const draggedOverParentValues = parentValues(\n      insertionState.draggedOverParent.el,\n      insertionState.draggedOverParent.data\n    );\n\n    const draggedValues = state.draggedNodes.map((node) => node.data.value);\n\n    const insertValues = state.dynamicValues.length\n      ? state.dynamicValues\n      : draggedValues;\n\n    draggedOverParentValues.push(...insertValues);\n\n    setParentValues(\n      insertionState.draggedOverParent.el,\n      insertionState.draggedOverParent.data,\n      [...draggedOverParentValues]\n    );\n\n    const transferEventData = {\n      sourceParent: state.lastParent,\n      targetParent: data.targetData.parent,\n      previousSourceValues: [...draggedOverParentValues],\n      sourceValues: [...state.lastParent.data.getValues(state.lastParent.el)],\n      previousTargetValues: [...draggedOverParentValues],\n      targetValues: [\n        ...data.targetData.parent.data.getValues(data.targetData.parent.el),\n      ],\n      previousSourceNodes: [...state.lastParent.data.enabledNodes],\n      sourceNodes: [...state.lastParent.data.enabledNodes],\n      previousTargetNodes: [...data.targetData.parent.data.enabledNodes],\n      targetNodes: [...data.targetData.parent.data.enabledNodes],\n      draggedNode: state.draggedNode,\n      sourcePreviousPosition: state.initialIndex,\n      targetPosition: 0,\n    };\n    if (data.targetData.parent.data.config.onTransfer)\n      data.targetData.parent.data.config.onTransfer(transferEventData);\n    if (state.lastParent.data.config.onTransfer)\n      state.lastParent.data.config.onTransfer(transferEventData);\n\n    removeClass(\n      [insertionState.draggedOverParent.el],\n      insertionState.draggedOverParent.data.config.dropZoneClass\n    );\n  }\n\n  if (insertionPoint) insertionPoint.style.display = \"none\";\n\n  const dropZoneClass =\n    \"clonedDraggedNode\" in state\n      ? data.targetData.parent.data.config.touchDropZoneClass\n      : data.targetData.parent.data.config.dropZoneClass;\n\n  removeClass(\n    insertionState.draggedOverNodes.map((node) => node.el),\n    dropZoneClass\n  );\n\n  const dragPlaceholderClass =\n    data.targetData.parent.data.config.dragPlaceholderClass;\n\n  removeClass(\n    state.draggedNodes.map((node) => node.el),\n    dragPlaceholderClass\n  );\n\n  insertionState.draggedOverNodes = [];\n\n  originalHandleEnd(data);\n}\n","import type {\n  Node,\n  NodeEventData,\n  NodeRecord,\n  DragState,\n  ParentData,\n  NodeDragEventData,\n  NodePointerEventData,\n  DNDPluginData,\n  TearDownNodeData,\n  SetupNodeData,\n} from \"../../types\";\nimport type {\n  MultiDragConfig,\n  MultiDragParentConfig,\n  MultiDragState,\n} from \"./types\";\nimport {\n  parents,\n  handleLongPress,\n  initDrag,\n  dragstartClasses,\n  end,\n  state,\n  resetState,\n} from \"../../index\";\nimport { addNodeClass, removeClass, copyNodeStyle } from \"../../utils\";\n\nexport const multiDragState: MultiDragState<any> = {\n  selectedNodes: Array<NodeRecord<any>>(),\n\n  activeNode: undefined,\n\n  isTouch: false,\n};\n\nexport function multiDrag<T>(\n  multiDragConfig: Partial<MultiDragConfig<T>> = {}\n) {\n  return (parent: HTMLElement) => {\n    const parentData = parents.get(parent);\n\n    if (!parentData) return;\n\n    const multiDragParentConfig = {\n      ...parentData.config,\n      multiDragConfig: multiDragConfig,\n    } as MultiDragParentConfig<T>;\n\n    return {\n      setup() {\n        multiDragParentConfig.handleDragstart =\n          multiDragConfig.multiHandleDragstart || multiHandleDragstart;\n\n        multiDragParentConfig.handlePointerdown =\n          multiDragConfig.multiHandlePointerdown || multiHandlePointerdown;\n\n        multiDragParentConfig.handleEnd =\n          multiDragConfig.multiHandleEnd || multiHandleEnd;\n\n        multiDragParentConfig.reapplyDragClasses =\n          multiDragConfig.multiReapplyDragClasses || multiReapplyDragClasses;\n\n        parentData.config = multiDragParentConfig;\n\n        multiDragParentConfig.multiDragConfig.plugins?.forEach((plugin) => {\n          plugin(parent)?.tearDown?.();\n        });\n\n        multiDragParentConfig.multiDragConfig.plugins?.forEach((plugin) => {\n          plugin(parent)?.setup?.();\n        });\n      },\n\n      tearDownNodeRemap<T>(data: TearDownNodeData<T>) {\n        multiDragParentConfig.multiDragConfig?.plugins?.forEach((plugin) => {\n          plugin(data.parent)?.tearDownNodeRemap?.(data);\n        });\n      },\n\n      tearDownNode<T>(data: TearDownNodeData<T>) {\n        multiDragParentConfig.multiDragConfig?.plugins?.forEach((plugin) => {\n          plugin(data.parent)?.tearDownNode?.(data);\n        });\n      },\n\n      setupNodeRemap<T>(data: SetupNodeData<T>) {\n        multiDragParentConfig.multiDragConfig?.plugins?.forEach((plugin) => {\n          plugin(data.parent)?.setupNodeRemap?.(data);\n        });\n      },\n\n      setupNode<T>(data: SetupNodeData<T>) {\n        multiDragParentConfig.multiDragConfig?.plugins?.forEach((plugin) => {\n          plugin(data.parent)?.setupNode?.(data);\n        });\n      },\n    } satisfies DNDPluginData;\n  };\n}\n\nexport function multiReapplyDragClasses<T>(\n  node: Node,\n  parentData: ParentData<T>\n) {\n  if (!state) return;\n\n  const dropZoneClass =\n    \"touchedNode\" in state\n      ? parentData.config.multiDragConfig.touchDropZoneClass\n      : parentData.config.multiDragConfig.dropZoneClass;\n\n  const draggedNodeEls = state.draggedNodes.map((x) => x.el);\n\n  if (!draggedNodeEls.includes(node)) return;\n\n  addNodeClass([node], dropZoneClass, true);\n}\n\nexport function multiHandleEnd<T>(data: NodeEventData<T>) {\n  if (!state) return;\n\n  const isTouch = state && \"touchedNode\" in state;\n\n  if (isTouch && \"touchMoving\" in state && !state.touchMoving) return;\n\n  end(data, state);\n\n  selectionsEnd(data, state);\n\n  resetState();\n}\n\nexport function selectionsEnd<T>(data: NodeEventData<T>, state: DragState<T>) {\n  const multiDragConfig = data.targetData.parent.data.config.multiDragConfig;\n\n  const selectedClass =\n    data.targetData.parent.data.config.selectionsConfig?.selectedClass;\n\n  const isTouch = state && \"touchedNode\" in state;\n\n  if (selectedClass) {\n    removeClass(\n      multiDragState.selectedNodes.map((x) => x.el),\n      selectedClass\n    );\n  }\n\n  multiDragState.selectedNodes = [];\n\n  multiDragState.activeNode = undefined;\n\n  const dropZoneClass = isTouch\n    ? multiDragConfig.selectionDropZoneClass\n    : multiDragConfig.touchSelectionDraggingClass;\n\n  removeClass(\n    state.draggedNodes.map((x) => x.el),\n    dropZoneClass\n  );\n}\n\nexport function multiHandleDragstart<T>(data: NodeEventData<T>) {\n  if (!(data.e instanceof DragEvent)) return;\n\n  multiDragstart({\n    e: data.e,\n    targetData: data.targetData,\n  });\n}\n\nexport function multiDragstart<T>(data: NodeDragEventData<T>) {\n  const dragState = initDrag(data);\n\n  multiDragState.isTouch = false;\n\n  const multiDragConfig = data.targetData.parent.data.config.multiDragConfig;\n\n  const parentValues = data.targetData.parent.data.getValues(\n    data.targetData.parent.el\n  );\n\n  let selectedValues = multiDragState.selectedNodes.length\n    ? multiDragState.selectedNodes.map((x) => x.data.value)\n    : multiDragConfig.selections &&\n      multiDragConfig.selections(parentValues, data.targetData.parent.el);\n\n  if (selectedValues === undefined) return;\n\n  if (!selectedValues.includes(data.targetData.node.data.value)) {\n    selectedValues = [data.targetData.node.data.value, ...selectedValues];\n\n    const selectionConfig = data.targetData.parent.data.config.selectionsConfig;\n\n    addNodeClass(\n      [data.targetData.node.el],\n      selectionConfig?.selectedClass,\n      true\n    );\n\n    multiDragState.selectedNodes.push(data.targetData.node);\n  }\n\n  const originalZIndex = data.targetData.node.el.style.zIndex;\n\n  dragState.originalZIndex = originalZIndex;\n\n  data.targetData.node.el.style.zIndex = \"9999\";\n\n  if (Array.isArray(selectedValues) && selectedValues.length) {\n    const targetRect = data.targetData.node.el.getBoundingClientRect();\n\n    const [x, y] = [\n      data.e.clientX - targetRect.left,\n      data.e.clientY - targetRect.top,\n    ];\n\n    stackNodes(handleSelections(data, selectedValues, dragState, x, y));\n  } else {\n    const config = data.targetData.parent.data.config;\n\n    dragstartClasses(\n      dragState.draggedNode.el,\n      config.draggingClass,\n      config.dropZoneClass,\n      config.dragPlaceholderClass\n    );\n  }\n}\n\nexport function multiHandlePointerdown<T>(data: NodePointerEventData<T>) {\n  if (!(data.e instanceof TouchEvent)) return;\n\n  multiPointerdown({\n    e: data.e,\n    targetData: data.targetData,\n  });\n}\n\nexport function multiPointerdown<T>(data: NodePointerEventData<T>) {\n  multiDragState.isTouch = true;\n\n  multiDragState.activeNode = data.targetData.node;\n\n  const multiDragConfig = data.targetData.parent.data.config.multiDragConfig;\n\n  const parentValues = data.targetData.parent.data.getValues(\n    data.targetData.parent.el\n  );\n\n  let selectedValues = [];\n\n  if (data.targetData.parent.data.config.selectionsConfig) {\n    selectedValues = multiDragState.selectedNodes.map((x) => x.data.value);\n  } else {\n    selectedValues =\n      multiDragConfig.selections &&\n      multiDragConfig.selections(parentValues, data.targetData.parent.el);\n  }\n\n  selectedValues = [data.targetData.node.data.value, ...selectedValues];\n\n  const selectionConfig = data.targetData.parent.data.config.selectionsConfig;\n\n  addNodeClass([data.targetData.node.el], selectionConfig?.selectedClass, true);\n\n  if (!state) return;\n\n  if (Array.isArray(selectedValues) && selectedValues.length) {\n    stackNodes(\n      handleSelections(\n        data,\n        selectedValues,\n        state,\n        state?.startLeft,\n        state.startTop\n      )\n    );\n  }\n\n  handleLongPress(data, state);\n}\n\nexport function handleSelections<T>(\n  data: NodeEventData<T>,\n  selectedValues: Array<T>,\n  state: DragState<T>,\n  x: number,\n  y: number\n) {\n  for (const child of data.targetData.parent.data.enabledNodes) {\n    if (child.el === state.draggedNode.el) continue;\n\n    if (!selectedValues.includes(child.data.value)) continue;\n\n    state.draggedNodes.push(child);\n  }\n\n  const config = data.targetData.parent.data.config.multiDragConfig;\n\n  const clonedEls = state.draggedNodes.map((x: NodeRecord<T>) => {\n    const el = x.el.cloneNode(true) as Node;\n\n    copyNodeStyle(x.el, el, true);\n\n    if (data.e instanceof DragEvent) addNodeClass([el], config.draggingClass);\n\n    return el;\n  });\n\n  setTimeout(() => {\n    if (data.e instanceof DragEvent) {\n      addNodeClass(\n        state.draggedNodes.map((x) => x.el),\n        config.dropZoneClass\n      );\n    }\n  });\n\n  state.clonedDraggedEls = clonedEls;\n\n  return { data, state, x, y };\n}\n\nexport function stackNodes<T>({\n  data,\n  state,\n  x,\n  y,\n}: {\n  data: NodeEventData<T>;\n  state: DragState<T>;\n  x: number;\n  y: number;\n}) {\n  const wrapper = document.createElement(\"div\");\n\n  for (const el of state.clonedDraggedEls) {\n    if (el instanceof HTMLElement) el.style.pointerEvents = \"none\";\n\n    wrapper.append(el);\n  }\n\n  const { width } = state.draggedNode.el.getBoundingClientRect();\n\n  wrapper.style.cssText = `\n        display: flex;\n        flex-direction: column;\n        width: ${width}px;\n        position: fixed;\n        pointer-events: none;\n        z-index: 9999;\n        left: -9999px\n      `;\n\n  document.body.append(wrapper);\n\n  if (data.e instanceof DragEvent) {\n    data.e.dataTransfer?.setDragImage(wrapper, x, y);\n\n    setTimeout(() => {\n      wrapper.remove();\n    });\n  } else if (\"touchedNode\" in state) {\n    state.touchedNode = wrapper;\n  }\n}\n","import type {\n  SetupNodeData,\n  NodeEventData,\n  TearDownNodeData,\n  ParentConfig,\n} from '../../../../types'\n\nimport type { SelectionsConfig } from './types'\n\nimport { parents, nodeEventData } from '../../../../index'\n\nimport { addEvents, removeClass, addNodeClass } from '../../../../utils'\n\nimport { multiDragState } from '../../index'\n\nexport function selections<T>(selectionsConfig: SelectionsConfig<T> = {}) {\n  return (parent: HTMLElement) => {\n    const parentData = parents.get(parent)\n\n    if (!parentData) return\n\n    return {\n      setup() {\n        parentData.config.selectionsConfig = selectionsConfig\n\n        parentData.config.handleClick =\n          selectionsConfig.handleClick || handleClick\n\n        parentData.config.handleKeydown =\n          selectionsConfig.handleKeydown || handleKeydown\n\n        selectionsConfig.clickawayDeselect =\n          selectionsConfig.clickawayDeselect === undefined\n            ? true\n            : selectionsConfig.clickawayDeselect\n\n        if (!selectionsConfig.clickawayDeselect) return\n\n        const rootAbortControllers = addEvents(parentData.config.root, {\n          click: handleRootClick.bind(null, parentData.config),\n        })\n\n        parentData.abortControllers['root'] = rootAbortControllers\n      },\n\n      tearDown() {\n        if (parentData.abortControllers.root) {\n          parentData.abortControllers.root.abort()\n        }\n      },\n\n      tearDownNode<T>(data: TearDownNodeData<T>) {\n        if (data.parentData.abortControllers.selectionsNode) {\n          data.parentData.abortControllers.selectionsNode.abort()\n        }\n      },\n\n      setupNode<T>(data: SetupNodeData<T>) {\n        const config = data.parentData.config\n\n        data.node.setAttribute('tabindex', '0')\n\n        const abortControllers = addEvents(data.node, {\n          click: nodeEventData(config.handleClick),\n          keydown: nodeEventData(config.handleKeydown),\n        })\n\n        data.nodeData.abortControllers['selectionsNode'] = abortControllers\n      },\n    }\n  }\n}\n\nfunction handleRootClick<T>(config: ParentConfig<T>) {\n  removeClass(\n    multiDragState.selectedNodes.map((x) => x.el),\n    config.selectionsConfig.selectedClass\n  )\n\n  multiDragState.selectedNodes = []\n\n  multiDragState.activeNode = undefined\n}\n\nfunction handleKeydown<T>(data: NodeEventData<T>) {\n  keydown(data)\n}\n\nfunction handleClick<T>(data: NodeEventData<T>) {\n  click(data)\n}\n\nfunction click<T>(data: NodeEventData<T>) {\n  data.e.stopPropagation()\n\n  const selectionsConfig = data.targetData.parent.data.config.selectionsConfig\n\n  const ctParentData = data.targetData.parent.data\n\n  const selectedClass = selectionsConfig.selectedClass\n\n  const targetNode = data.targetData.node\n\n  let commandKey = false\n\n  let shiftKey = false\n\n  if (data.e instanceof MouseEvent) {\n    commandKey = data.e.ctrlKey || data.e.metaKey\n    shiftKey = data.e.shiftKey\n  }\n\n  if (shiftKey && multiDragState.isTouch === false) {\n    if (!multiDragState.activeNode) {\n      multiDragState.activeNode = {\n        el: data.targetData.node.el,\n        data: data.targetData.node.data,\n      }\n\n      for (let x = 0; x <= data.targetData.node.data.index; x++) {\n        multiDragState.selectedNodes.push(ctParentData.enabledNodes[x])\n        if (selectedClass) {\n          addNodeClass([ctParentData.enabledNodes[x].el], selectedClass, true)\n        }\n      }\n    } else {\n      const [minIndex, maxIndex] =\n        multiDragState.activeNode.data.index < data.targetData.node.data.index\n          ? [\n              multiDragState.activeNode.data.index,\n              data.targetData.node.data.index,\n            ]\n          : [\n              data.targetData.node.data.index,\n              multiDragState.activeNode.data.index,\n            ]\n\n      const selectedNodes = ctParentData.enabledNodes.slice(\n        minIndex,\n        maxIndex + 1\n      )\n\n      if (selectedNodes.length === 1) {\n        for (const node of multiDragState.selectedNodes) {\n          if (selectedClass) node.el.classList.remove(selectedClass)\n        }\n\n        multiDragState.selectedNodes = [\n          {\n            el: data.targetData.node.el,\n            data: data.targetData.node.data,\n          },\n        ]\n\n        multiDragState.activeNode = {\n          el: data.targetData.node.el,\n          data: data.targetData.node.data,\n        }\n\n        if (selectedClass) {\n          data.targetData.node.el.classList.add(selectedClass)\n        }\n      }\n      for (let x = minIndex - 1; x >= 0; x--) {\n        if (\n          multiDragState.selectedNodes.includes(ctParentData.enabledNodes[x])\n        ) {\n          multiDragState.selectedNodes = [\n            ...multiDragState.selectedNodes.filter(\n              (el) => el !== ctParentData.enabledNodes[x]\n            ),\n          ]\n\n          if (selectedClass) {\n            addNodeClass([ctParentData.enabledNodes[x].el], selectedClass, true)\n          }\n        } else {\n          break\n        }\n      }\n      for (let x = maxIndex; x < ctParentData.enabledNodes.length; x++) {\n        if (\n          multiDragState.selectedNodes.includes(ctParentData.enabledNodes[x])\n        ) {\n          multiDragState.selectedNodes = [\n            ...multiDragState.selectedNodes.filter(\n              (el) => el !== ctParentData.enabledNodes[x]\n            ),\n          ]\n          if (selectedClass) {\n            removeClass([ctParentData.enabledNodes[x].el], selectedClass)\n          }\n        } else {\n          break\n        }\n      }\n      for (const node of selectedNodes) {\n        if (!multiDragState.selectedNodes.map((x) => x.el).includes(node.el)) {\n          multiDragState.selectedNodes.push(node)\n        }\n\n        if (selectedClass) {\n          addNodeClass([node.el], selectedClass, true)\n        }\n      }\n    }\n  } else if (commandKey) {\n    if (multiDragState.selectedNodes.map((x) => x.el).includes(targetNode.el)) {\n      multiDragState.selectedNodes = multiDragState.selectedNodes.filter(\n        (el) => el.el !== targetNode.el\n      )\n      if (selectedClass) {\n        removeClass([targetNode.el], selectedClass)\n      }\n    } else {\n      multiDragState.activeNode = targetNode\n      if (selectedClass) {\n        addNodeClass([targetNode.el], selectedClass, true)\n      }\n      multiDragState.selectedNodes.push(targetNode)\n    }\n  } else if (!commandKey && multiDragState.isTouch === false) {\n    if (multiDragState.selectedNodes.map((x) => x.el).includes(targetNode.el)) {\n      multiDragState.selectedNodes = multiDragState.selectedNodes.filter(\n        (el) => el.el !== targetNode.el\n      )\n      if (selectedClass) {\n        removeClass([targetNode.el], selectedClass)\n      }\n    } else {\n      multiDragState.activeNode = {\n        el: data.targetData.node.el,\n        data: data.targetData.node.data,\n      }\n\n      if (selectedClass) {\n        for (const el of multiDragState.selectedNodes) {\n          removeClass([el.el], selectedClass)\n        }\n\n        addNodeClass([data.targetData.node.el], selectedClass, true)\n      }\n      multiDragState.selectedNodes = [\n        {\n          el: data.targetData.node.el,\n          data: data.targetData.node.data,\n        },\n      ]\n    }\n  } else {\n    if (multiDragState.selectedNodes.map((x) => x.el).includes(targetNode.el)) {\n      multiDragState.selectedNodes = multiDragState.selectedNodes.filter(\n        (el) => el.el !== targetNode.el\n      )\n      if (selectedClass) {\n        removeClass([targetNode.el], selectedClass)\n      }\n    } else {\n      multiDragState.activeNode = targetNode\n      if (selectedClass) {\n        addNodeClass([targetNode.el], selectedClass, true)\n      }\n      multiDragState.selectedNodes.push(targetNode)\n    }\n  }\n}\n\nfunction keydown<T>(data: NodeEventData<T>) {\n  if (!(data.e instanceof KeyboardEvent)) return\n\n  const keys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight']\n\n  if (!keys.includes(data.e.key) || !multiDragState.activeNode) return\n\n  const selectionsConfig = data.targetData.parent.data.config.selectionsConfig\n\n  data.e.preventDefault()\n\n  const parentData = data.targetData.parent.data\n\n  const nodeData = data.targetData.node.data\n\n  const enabledNodes = parentData.enabledNodes\n\n  const moveUp = data.e.key === 'ArrowUp' || data.e.key === 'ArrowLeft'\n\n  const moveDown = data.e.key === 'ArrowDown' || data.e.key === 'ArrowRight'\n\n  const invalidKeydown =\n    (moveUp && nodeData.index === 0) ||\n    (moveDown && nodeData.index === enabledNodes.length - 1)\n\n  if (invalidKeydown) return\n\n  const adjacentNode = enabledNodes[nodeData.index + (moveUp ? -1 : 1)]\n\n  const selectedClass = selectionsConfig.selectedClass\n\n  if (!adjacentNode) return\n\n  if (data.e.altKey) {\n    if (multiDragState.selectedNodes.length > 1) {\n      for (const el of multiDragState.selectedNodes) {\n        if (selectedClass && multiDragState.activeNode !== el) {\n          removeClass([el.el], selectedClass)\n        }\n      }\n\n      multiDragState.selectedNodes = multiDragState.selectedNodes.filter(\n        (el) => el !== multiDragState.activeNode\n      )\n    }\n    const parentValues = parentData.getValues(data.targetData.parent.el)\n\n    ;[\n      parentValues[nodeData.index],\n      parentValues[nodeData.index + (moveUp ? -1 : 1)],\n    ] = [\n      parentValues[nodeData.index + (moveUp ? -1 : 1)],\n      parentValues[nodeData.index],\n    ]\n\n    parentData.setValues(parentValues, data.targetData.parent.el)\n  } else if (data.e.shiftKey && multiDragState.isTouch === false) {\n    if (\n      !multiDragState.selectedNodes.map((x) => x.el).includes(adjacentNode.el)\n    ) {\n      multiDragState.selectedNodes.push(adjacentNode)\n\n      if (selectedClass) {\n        addNodeClass([adjacentNode.el], selectedClass, true)\n      }\n\n      multiDragState.activeNode = adjacentNode\n    } else {\n      if (\n        multiDragState.selectedNodes\n          .map((x) => x.el)\n          .includes(multiDragState.activeNode.el)\n      ) {\n        multiDragState.selectedNodes = multiDragState.selectedNodes.filter(\n          (el) => el !== multiDragState.activeNode\n        )\n\n        if (selectedClass) {\n          removeClass([multiDragState.activeNode.el], selectedClass)\n        }\n\n        multiDragState.activeNode = adjacentNode\n      }\n    }\n  } else {\n    for (const el of multiDragState.selectedNodes) {\n      if (selectedClass && multiDragState.activeNode !== el) {\n        removeClass([el.el], selectedClass)\n      }\n    }\n\n    removeClass([multiDragState.activeNode.el], selectedClass)\n\n    multiDragState.selectedNodes = [adjacentNode]\n\n    addNodeClass([adjacentNode.el], selectedClass, true)\n\n    multiDragState.activeNode = adjacentNode\n  }\n\n  data.targetData.node.el.blur()\n\n  multiDragState.activeNode = adjacentNode\n\n  multiDragState.activeNode.el.focus()\n}\n","import type {\n  NodeDragEventData,\n  ParentConfig,\n  DragState,\n  NodePointerEventData,\n  NodeRecord,\n  PointeroverNodeEvent,\n  ParentEventData,\n  PointeroverParentEvent,\n} from \"../../types\";\nimport {\n  state,\n  parents,\n  handleEnd as originalHandleEnd,\n  parentValues,\n  setParentValues,\n} from \"../../index\";\nimport { addNodeClass, removeClass } from \"../../utils\";\n\nexport const placeState = {\n  draggedOverNodes: Array<NodeRecord<any>>(),\n};\n\ninterface PlaceConfig<T> extends ParentConfig<T> {}\n\nexport function place<T>(placeConfig: Partial<PlaceConfig<T>> = {}) {\n  return (parent: HTMLElement) => {\n    const parentData = parents.get(parent);\n\n    if (!parentData) return;\n\n    const placeParentConfig = {\n      ...parentData.config,\n      placeConfig: placeConfig,\n    } as PlaceConfig<T>;\n\n    return {\n      setup() {\n        placeParentConfig.handleDragoverNode =\n          placeConfig.handleDragoverNode || handleDragoverNode;\n\n        placeParentConfig.handleTouchOverNode =\n          placeConfig.handleTouchOverNode || handleTouchOverNode;\n\n        placeParentConfig.handleTouchOverParent =\n          placeConfig.handleTouchOverParent || handleTouchOverParent;\n\n        placeParentConfig.handleEnd = placeConfig.handleEnd || handleEnd;\n\n        parentData.config = placeParentConfig;\n      },\n    };\n  };\n}\n\nfunction handleDragoverNode<T>(data: NodeDragEventData<T>) {\n  if (!state) return;\n\n  dragoverNode(data, state);\n}\n\nexport function handleDragoverParent<T>(_data: ParentEventData<T>) {}\n\nexport function handleTouchOverParent<T>(_data: PointeroverParentEvent<T>) {}\n\nfunction handleTouchOverNode<T>(data: PointeroverNodeEvent<T>) {\n  if (!state) return;\n\n  if (data.detail.targetData.parent.el !== state.lastParent.el) return;\n\n  const dropZoneClass =\n    data.detail.targetData.parent.data.config.touchDropZoneClass;\n\n  removeClass(\n    placeState.draggedOverNodes.map((node) => node.el),\n    dropZoneClass\n  );\n\n  const enabledNodes = data.detail.targetData.parent.data.enabledNodes;\n\n  placeState.draggedOverNodes = enabledNodes.slice(\n    data.detail.targetData.node.data.index,\n    data.detail.targetData.node.data.index + state.draggedNodes.length\n  );\n\n  addNodeClass(\n    placeState.draggedOverNodes.map((node) => node.el),\n    dropZoneClass,\n    true\n  );\n\n  state.lastTargetValue = data.detail.targetData.node.data.value;\n\n  state.lastParent = data.detail.targetData.parent;\n}\n\nfunction dragoverNode<T>(data: NodeDragEventData<T>, state: DragState<T>) {\n  data.e.preventDefault();\n\n  data.e.stopPropagation();\n\n  if (data.targetData.parent.el !== state.lastParent.el) return;\n\n  const dropZoneClass = data.targetData.parent.data.config.dropZoneClass;\n\n  removeClass(\n    placeState.draggedOverNodes.map((node) => node.el),\n    dropZoneClass\n  );\n\n  const enabledNodes = data.targetData.parent.data.enabledNodes;\n\n  if (!enabledNodes) return;\n\n  placeState.draggedOverNodes = enabledNodes.slice(\n    data.targetData.node.data.index,\n    data.targetData.node.data.index + state.draggedNodes.length\n  );\n\n  addNodeClass(\n    placeState.draggedOverNodes.map((node) => node.el),\n    dropZoneClass,\n    true\n  );\n\n  state.lastTargetValue = data.targetData.node.data.value;\n\n  state.lastParent = data.targetData.parent;\n}\n\nfunction handleEnd<T>(data: NodeDragEventData<T> | NodePointerEventData<T>) {\n  if (!state) return;\n\n  if (state.transferred || state.lastParent.el !== state.initialParent.el)\n    return;\n\n  const draggedParentValues = parentValues(\n    state.initialParent.el,\n    state.initialParent.data\n  );\n\n  const draggedValues = state.draggedNodes.map((node) => node.data.value);\n\n  const newParentValues = [\n    ...draggedParentValues.filter((x) => !draggedValues.includes(x)),\n  ];\n\n  const index = placeState.draggedOverNodes[0].data.index;\n\n  newParentValues.splice(index, 0, ...draggedValues);\n\n  setParentValues(data.targetData.parent.el, data.targetData.parent.data, [\n    ...newParentValues,\n  ]);\n\n  const dropZoneClass =\n    \"clonedDraggedNode\" in state\n      ? data.targetData.parent.data.config.touchDropZoneClass\n      : data.targetData.parent.data.config.dropZoneClass;\n\n  removeClass(\n    placeState.draggedOverNodes.map((node) => node.el),\n    dropZoneClass\n  );\n\n  originalHandleEnd(data);\n}\n","import type {\n  NodeDragEventData,\n  ParentConfig,\n  DragState,\n  NodeRecord,\n  ParentEventData,\n  PointeroverParentEvent,\n  PointeroverNodeEvent,\n  NodePointerEventData,\n} from \"../../types\";\nimport {\n  state,\n  parents,\n  handleEnd as originalHandleEnd,\n  parentValues,\n  setParentValues,\n} from \"../../index\";\nimport { addNodeClass, removeClass } from \"../../utils\";\n\nexport const swapState = {\n  draggedOverNodes: Array<NodeRecord<any>>(),\n};\n\ninterface SwapConfig<T> extends ParentConfig<T> {}\n\nexport function swap<T>(swapConfig: Partial<SwapConfig<T>> = {}) {\n  return (parent: HTMLElement) => {\n    const parentData = parents.get(parent);\n\n    if (!parentData) return;\n\n    const swapParentConfig = {\n      ...parentData.config,\n      swapConfig: swapConfig,\n    } as SwapConfig<T>;\n\n    return {\n      setup() {\n        swapParentConfig.handleDragoverParent =\n          swapConfig.handleDragoverParent || handleDragoverParent;\n\n        swapParentConfig.handleDragoverNode =\n          swapConfig.handleDragoverNode || handleDragoverNode;\n\n        swapParentConfig.handlePointeroverNode =\n          swapConfig.handlePointeroverNode || handlePointeroverNode;\n\n        swapParentConfig.handlePointeroverParent =\n          swapConfig.handlePointeroverParent || handlePointeroverParent;\n\n        swapParentConfig.handleEnd = swapConfig.handleEnd || handleEnd;\n\n        parentData.config = swapParentConfig;\n      },\n    };\n  };\n}\n\nfunction handleDragoverNode<T>(data: NodeDragEventData<T>) {\n  if (!state) return;\n\n  dragoverNode(data, state);\n}\n\nexport function handleDragoverParent<T>(_data: ParentEventData<T>) {}\n\nexport function handlePointeroverParent<T>(_data: PointeroverParentEvent<T>) {}\n\nfunction handlePointeroverNode<T>(data: PointeroverNodeEvent<T>) {\n  if (!state) return;\n\n  if (data.detail.targetData.parent.el !== state.lastParent.el) return;\n\n  const dropZoneClass =\n    data.detail.targetData.parent.data.config.touchDropZoneClass;\n\n  removeClass(\n    swapState.draggedOverNodes.map((node) => node.el),\n    dropZoneClass\n  );\n\n  const enabledNodes = data.detail.targetData.parent.data.enabledNodes;\n\n  swapState.draggedOverNodes = enabledNodes.slice(\n    data.detail.targetData.node.data.index,\n    data.detail.targetData.node.data.index + state.draggedNodes.length\n  );\n\n  console.log(\"doing this\");\n\n  addNodeClass(\n    swapState.draggedOverNodes.map((node) => node.el),\n    dropZoneClass,\n    true\n  );\n\n  state.lastTargetValue = data.detail.targetData.node.data.value;\n\n  state.lastParent = data.detail.targetData.parent;\n}\n\nfunction dragoverNode<T>(data: NodeDragEventData<T>, state: DragState<T>) {\n  data.e.preventDefault();\n\n  data.e.stopPropagation();\n\n  if (data.targetData.parent.el !== state.lastParent.el) return;\n\n  const dropZoneClass = data.targetData.parent.data.config.dropZoneClass;\n\n  removeClass(\n    swapState.draggedOverNodes.map((node) => node.el),\n    dropZoneClass\n  );\n\n  const enabledNodes = data.targetData.parent.data.enabledNodes;\n\n  if (!enabledNodes) return;\n\n  swapState.draggedOverNodes = enabledNodes.slice(\n    data.targetData.node.data.index,\n    data.targetData.node.data.index + state.draggedNodes.length\n  );\n\n  addNodeClass(\n    swapState.draggedOverNodes.map((node) => node.el),\n    dropZoneClass,\n    true\n  );\n\n  state.lastTargetValue = data.targetData.node.data.value;\n\n  state.lastParent = data.targetData.parent;\n}\n\nfunction handleEnd<T>(data: NodeDragEventData<T> | NodePointerEventData<T>) {\n  if (!state) return;\n\n  if (!state.transferred) {\n    const draggedParentValues = parentValues(\n      state.initialParent.el,\n      state.initialParent.data\n    );\n\n    let targetParentValues = parentValues(\n      state.lastParent.el,\n      state.lastParent.data\n    );\n\n    const draggedValues = state.draggedNodes.map((node) => node.data.value);\n\n    const draggedOverNodeValues = swapState.draggedOverNodes.map(\n      (node) => node.data.value\n    );\n\n    const draggedIndex = state.draggedNodes[0].data.index;\n\n    console.log(\"draggedIndex\", swapState.draggedOverNodes);\n\n    const draggedOverIndex = swapState.draggedOverNodes[0].data.index;\n\n    targetParentValues.splice(\n      draggedOverIndex,\n      draggedValues.length,\n      ...draggedValues\n    );\n\n    if (state.initialParent.el === state.lastParent.el) {\n      targetParentValues.splice(\n        draggedIndex,\n        draggedValues.length,\n        ...draggedOverNodeValues\n      );\n\n      setParentValues(state.initialParent.el, state.initialParent.data, [\n        ...targetParentValues,\n      ]);\n    } else {\n      draggedParentValues.splice(\n        draggedIndex,\n        draggedValues.length,\n        ...draggedOverNodeValues\n      );\n\n      setParentValues(state.lastParent.el, state.lastParent.data, [\n        ...targetParentValues,\n      ]);\n\n      setParentValues(state.initialParent.el, state.initialParent.data, [\n        ...draggedParentValues,\n      ]);\n    }\n  }\n\n  const dropZoneClass =\n    \"clonedDraggedNode\" in state\n      ? data.targetData.parent.data.config.touchDropZoneClass\n      : data.targetData.parent.data.config.dropZoneClass;\n\n  removeClass(\n    swapState.draggedOverNodes.map((node) => node.el),\n    dropZoneClass\n  );\n\n  originalHandleEnd(data);\n}\n","import type {\n  DNDPlugin,\n  DragAndDrop,\n  DragStateProps,\n  Node,\n  DragState,\n  NodeData,\n  NodeDragEventData,\n  NodeEventData,\n  NodeRecord,\n  NodesData,\n  NodeTargetData,\n  ParentConfig,\n  ParentData,\n  ParentEventData,\n  ParentsData,\n  ParentTargetData,\n  ScrollData,\n  SetupNodeData,\n  TearDownNodeData,\n  PointeroverNodeEvent,\n  PointeroverParentEvent,\n  NodePointerEventData,\n} from \"./types\";\nimport {\n  addNodeClass,\n  addEvents,\n  copyNodeStyle,\n  eventCoordinates,\n  getElFromPoint,\n  getScrollParent,\n  isBrowser,\n  isNode,\n  noDefault,\n  removeClass,\n} from \"./utils\";\nexport { animations } from \"./plugins/animations\";\nexport { insertion } from \"./plugins/insertion\";\nexport { multiDrag } from \"./plugins/multiDrag\";\nexport { selections } from \"./plugins/multiDrag/plugins/selections\";\nexport { place } from \"./plugins/place\";\nexport { swap } from \"./plugins/swap\";\nexport * from \"./types\";\nexport * from \"./utils\";\nexport { isBrowser };\n\nlet isNative = false;\n\nconst scrollConfig: {\n  [key: string]: [number, number];\n} = {\n  up: [0, -1],\n  down: [0, 1],\n  left: [-1, 0],\n  right: [1, 0],\n};\n\nexport const nodes: NodesData<any> = new WeakMap<Node, NodeData<any>>();\n\nexport const parents: ParentsData<any> = new WeakMap<\n  HTMLElement,\n  ParentData<unknown>\n>();\n\nexport const treeAncestors: Record<string, HTMLElement> = {};\n\n/**\n * The state of the drag and drop. Is undefined until either dragstart or\n * touchstart is called.\n */\nexport let state: DragState<any> | undefined;\n\nexport function resetState() {\n  state = undefined;\n}\n\n/**\n * @param {DragStateProps} dragStateProps - Attributes to update state with.\n *\n * @mutation - Updates state with node values.\n *\n * @returns void\n */\nexport function setDragState<T>(\n  dragStateProps: DragStateProps<T>\n): DragState<T> {\n  state = {\n    ascendingDirection: false,\n    incomingDirection: undefined,\n    enterCount: 0,\n    targetIndex: 0,\n    pointerEnter: false,\n    affectedNodes: [],\n    dragMoving: false,\n    longPress: false,\n    pointerMoved: false,\n    draggedNodeDisplay: undefined,\n    dynamicValues: [],\n    longPressTimeout: 0,\n    lastValue: undefined,\n    activeNode: undefined,\n    lastTargetValue: undefined,\n    remapJustFinished: false,\n    clonedDraggedEls: [],\n    originalZIndex: undefined,\n    transferred: false,\n    ...dragStateProps,\n  } as DragState<T>;\n\n  return state;\n}\n\n/**\n * Initializes the drag and drop functionality for a given parent.\n *\n * @param {DragAndDrop} dragAndDrop - The drag and drop configuration.\n * @param {HTMLElement} dragAndDrop.parent - The parent element.\n *\n * @returns void\n */\nexport function dragAndDrop<T>({\n  parent,\n  getValues,\n  setValues,\n  config = {},\n}: DragAndDrop<T>): void {\n  if (!isBrowser) return;\n\n  tearDown(parent);\n\n  const parentData: ParentData<T> = {\n    getValues,\n    setValues,\n    config: {\n      handleDragstart,\n      handleDragoverNode,\n      handleDragoverParent,\n      handleEnd,\n      handleTouchstart,\n      handlePointeroverNode,\n      handlePointeroverParent,\n      handlePointerdown,\n      handlePointermove,\n      handleDragenterNode,\n      handleDragleaveNode,\n      handleParentDrop,\n      nativeDrag: config.nativeDrag ?? true,\n      performSort,\n      performTransfer,\n      root: document,\n      setupNode,\n      setupNodeRemap,\n      reapplyDragClasses,\n      tearDownNode,\n      tearDownNodeRemap,\n      remapFinished,\n      scrollBehavior: {\n        x: 0.8,\n        y: 0.8,\n      },\n      threshold: {\n        horizontal: 0,\n        vertical: 0,\n      },\n      ...config,\n    },\n    enabledNodes: [],\n    abortControllers: {},\n    privateClasses: [],\n  };\n\n  const nodesObserver = new MutationObserver(nodesMutated);\n\n  nodesObserver.observe(parent, { childList: true });\n\n  parents.set(parent, parentData);\n\n  if (config.treeAncestor && config.treeGroup)\n    treeAncestors[config.treeGroup] = parent;\n\n  config.plugins?.forEach((plugin) => {\n    plugin(parent)?.tearDown?.();\n  });\n\n  config.plugins?.forEach((plugin) => {\n    plugin(parent)?.tearDown?.();\n  });\n\n  config.plugins?.forEach((plugin: DNDPlugin) => {\n    plugin(parent)?.setup?.();\n  });\n\n  setup(parent, parentData);\n\n  remapNodes(parent, true);\n}\n\nexport function dragStateProps<T>(\n  data: NodeDragEventData<T> | NodePointerEventData<T>\n): DragStateProps<T> {\n  const { x, y } = eventCoordinates(data.e);\n\n  const rect = data.targetData.node.el.getBoundingClientRect();\n\n  return {\n    clonedDraggedNode: data.targetData.node.el.cloneNode(true) as Node,\n    preventEnter: false,\n    coordinates: {\n      x,\n      y,\n    },\n    draggedNode: {\n      el: data.targetData.node.el,\n      data: data.targetData.node.data,\n    },\n    draggedNodes: [\n      {\n        el: data.targetData.node.el,\n        data: data.targetData.node.data,\n      },\n    ],\n    initialIndex: data.targetData.node.data.index,\n    initialParent: {\n      el: data.targetData.parent.el,\n      data: data.targetData.parent.data,\n    },\n    lastParent: {\n      el: data.targetData.parent.el,\n      data: data.targetData.parent.data,\n    },\n    scrollParent: getScrollParent(data.targetData.node.el),\n    startLeft: x - rect.left,\n    startTop: y - rect.top,\n  };\n}\n\nexport function performSort<T>(\n  state: DragState<T>,\n  data: NodeDragEventData<T> | NodePointerEventData<T>\n) {\n  const draggedValues = dragValues(state);\n\n  const targetParentValues = parentValues(\n    data.targetData.parent.el,\n    data.targetData.parent.data\n  );\n\n  const originalIndex = state.draggedNode.data.index;\n\n  const enabledNodes = [...data.targetData.parent.data.enabledNodes];\n\n  const newParentValues = [\n    ...targetParentValues.filter((x) => !draggedValues.includes(x)),\n  ];\n\n  newParentValues.splice(data.targetData.node.data.index, 0, ...draggedValues);\n\n  state.lastTargetValue = data.targetData.node.data.value;\n\n  setParentValues(data.targetData.parent.el, data.targetData.parent.data, [\n    ...newParentValues,\n  ]);\n\n  if (data.targetData.parent.data.config.onSort) {\n    data.targetData.parent.data.config.onSort({\n      parent: {\n        el: data.targetData.parent.el,\n        data: data.targetData.parent.data,\n      },\n      previousValues: [...targetParentValues],\n      previousNodes: [...enabledNodes],\n      nodes: [...data.targetData.parent.data.enabledNodes],\n      values: [...newParentValues],\n      draggedNode: state.draggedNode,\n      previousPosition: originalIndex,\n      position: data.targetData.node.data.index,\n    });\n  }\n}\n\nexport function performTransfer<T>(\n  state: DragState<T>,\n  data: NodeEventData<T> | ParentEventData<T>\n) {\n  const draggedValues = dragValues(state);\n\n  const lastParentValues = parentValues(\n    state.lastParent.el,\n    state.lastParent.data\n  ).filter((x: any) => !draggedValues.includes(x));\n\n  const targetParentValues = parentValues(\n    data.targetData.parent.el,\n    data.targetData.parent.data\n  );\n\n  const reset =\n    state.initialParent.el === data.targetData.parent.el &&\n    data.targetData.parent.data.config.sortable === false;\n\n  let targetIndex: number;\n\n  if (\"node\" in data.targetData) {\n    if (reset) {\n      targetIndex = state.initialIndex;\n    } else if (data.targetData.parent.data.config.sortable === false) {\n      targetIndex = data.targetData.parent.data.enabledNodes.length;\n    } else {\n      targetIndex = data.targetData.node.data.index;\n    }\n\n    targetParentValues.splice(targetIndex, 0, ...draggedValues);\n  } else {\n    targetIndex = reset\n      ? state.initialIndex\n      : data.targetData.parent.data.enabledNodes.length;\n\n    targetParentValues.splice(targetIndex, 0, ...draggedValues);\n  }\n\n  setParentValues(state.lastParent.el, state.lastParent.data, lastParentValues);\n\n  setParentValues(\n    data.targetData.parent.el,\n    data.targetData.parent.data,\n    targetParentValues\n  );\n\n  function createTransferEventData(\n    state: DragState<T>,\n    data: NodeEventData<T> | ParentEventData<T>,\n    lastParentValues: Array<T>,\n    targetParentValues: Array<T>,\n    targetIndex: number\n  ) {\n    return {\n      sourceParent: state.lastParent,\n      targetParent: data.targetData.parent,\n      previousSourceValues: [...lastParentValues],\n      sourceValues: [...state.lastParent.data.getValues(state.lastParent.el)],\n      previousTargetValues: [...targetParentValues],\n      targetValues: [\n        ...data.targetData.parent.data.getValues(data.targetData.parent.el),\n      ],\n      previousSourceNodes: [...state.lastParent.data.enabledNodes],\n      sourceNodes: [...state.lastParent.data.enabledNodes],\n      previousTargetNodes: [...data.targetData.parent.data.enabledNodes],\n      targetNodes: [...data.targetData.parent.data.enabledNodes],\n      draggedNode: state.draggedNode,\n      sourcePreviousPosition: state.initialIndex,\n      targetPosition: targetIndex,\n    };\n  }\n\n  if (data.targetData.parent.data.config.onTransfer) {\n    const transferEventData = createTransferEventData(\n      state,\n      data,\n      lastParentValues,\n      targetParentValues,\n      targetIndex\n    );\n\n    data.targetData.parent.data.config.onTransfer(transferEventData);\n  }\n\n  if (state.lastParent.data.config.onTransfer) {\n    const transferEventData = createTransferEventData(\n      state,\n      data,\n      lastParentValues,\n      targetParentValues,\n      targetIndex\n    );\n\n    state.lastParent.data.config.onTransfer(transferEventData);\n  }\n}\n\nexport function parentValues<T>(\n  parent: HTMLElement,\n  parentData: ParentData<T>\n): Array<T> {\n  return [...parentData.getValues(parent)];\n}\n\nfunction findArrayCoordinates(\n  obj: any,\n  targetArray: Array<any>,\n  path: Array<any> = []\n) {\n  let result: Array<any> = [];\n\n  if (obj === targetArray) result.push(path);\n\n  if (Array.isArray(obj)) {\n    const index = obj.findIndex((el) => el === targetArray);\n    if (index !== -1) {\n      result.push([...path, index]);\n    } else {\n      for (let i = 0; i < obj.length; i++) {\n        result = result.concat(\n          findArrayCoordinates(obj[i], targetArray, [...path, i])\n        );\n      }\n    }\n  } else if (typeof obj === \"object\" && obj !== null) {\n    for (const key in obj) {\n      result = result.concat(\n        findArrayCoordinates(obj[key], targetArray, [...path, key])\n      );\n    }\n  }\n\n  return result;\n}\n\nfunction setValueAtCoordinatesUsingFindIndex(\n  obj: Array<any>,\n  targetArray: Array<any>,\n  newArray: Array<any>\n) {\n  const coordinates = findArrayCoordinates(obj, targetArray);\n\n  let newValues;\n\n  coordinates.forEach((coords) => {\n    let current = obj;\n    for (let i = 0; i < coords.length - 1; i++) {\n      const index = coords[i];\n      current = current[index];\n    }\n    const lastIndex = coords[coords.length - 1];\n\n    current[lastIndex] = newArray;\n\n    // We want to access getter of object we are setting to set the new values\n    // of the nested parent element (should be a part of the original structure of\n    // ancestor values).\n    newValues = current[lastIndex];\n  });\n\n  return newValues;\n}\n\nexport function setParentValues<T>(\n  parent: HTMLElement,\n  parentData: ParentData<T>,\n  values: Array<any>\n): void {\n  const treeGroup = parentData.config.treeGroup;\n\n  if (treeGroup) {\n    const ancestorEl = treeAncestors[treeGroup];\n\n    const ancestorData = parents.get(ancestorEl);\n\n    if (!ancestorData) return;\n\n    const ancestorValues = ancestorData.getValues(ancestorEl);\n\n    const initialParentValues = parentData.getValues(parent);\n\n    const updatedValues = setValueAtCoordinatesUsingFindIndex(\n      ancestorValues,\n      initialParentValues,\n      values\n    );\n\n    if (!updatedValues) {\n      console.warn(\"No updated value found\");\n\n      return;\n    }\n\n    parentData.setValues(updatedValues, parent);\n\n    return;\n  }\n\n  parentData.setValues(values, parent);\n}\n\nexport function dragValues<T>(state: DragState<T>): Array<T> {\n  return [...state.draggedNodes.map((x) => x.data.value)];\n}\n\n/**\n * Utility function to update parent config.\n */\nexport function updateConfig<T>(\n  parent: HTMLElement,\n  config: Partial<ParentConfig<T>>\n) {\n  const parentData = parents.get(parent);\n\n  if (!parentData) return;\n\n  parents.set(parent, {\n    ...parentData,\n    config: { ...parentData.config, ...config },\n  });\n\n  dragAndDrop({\n    parent,\n    getValues: parentData.getValues,\n    setValues: parentData.setValues,\n    config,\n  });\n}\n\nexport function handleParentDrop<T>(_data: NodeDragEventData<T>) {}\n\nexport function tearDown(parent: HTMLElement) {\n  const parentData = parents.get(parent);\n\n  if (!parentData) return;\n\n  if (parentData.abortControllers.mainParent) {\n    parentData.abortControllers.mainParent.abort();\n  }\n}\n\nfunction setup<T>(parent: HTMLElement, parentData: ParentData<T>): void {\n  parentData.abortControllers.mainParent = addEvents(parent, {\n    dragover: parentEventData(parentData.config.handleDragoverParent),\n    handlePointeroverParent: parentData.config.handlepointeroverParent,\n    drop: parentEventData(parentData.config.handleParentDrop),\n    hasNestedParent: (e: CustomEvent) => {\n      const parent = parents.get(e.target as HTMLElement);\n\n      if (!parent) return;\n\n      parent.nestedParent = e.detail.parent;\n    },\n  });\n}\n\nexport function setupNode<T>(data: SetupNodeData<T>) {\n  const config = data.parentData.config;\n\n  data.node.draggable = true;\n\n  data.nodeData.abortControllers.mainNode = addEvents(data.node, {\n    dragstart: nodeEventData(config.handleDragstart),\n    dragover: nodeEventData(config.handleDragoverNode),\n    dragenter: nodeEventData(config.handleDragenterNode),\n    dragleave: nodeEventData(config.handleDragleaveNode),\n    dragend: nodeEventData(config.handleEnd),\n    touchstart: noDefault,\n    pointerdown: nodeEventData(config.handlePointerdown),\n    pointermove: nodeEventData(config.handlePointermove),\n    pointerup: nodeEventData(config.handleEnd),\n    handlePointeroverNode: config.handlePointeroverNode,\n    mousedown: () => {\n      if (!config.nativeDrag) isNative = false;\n      else isNative = true;\n    },\n  });\n\n  config.reapplyDragClasses(data.node, data.parentData);\n\n  data.parentData.config.plugins?.forEach((plugin: DNDPlugin) => {\n    plugin(data.parent)?.setupNode?.(data);\n  });\n}\n\nexport function setupNodeRemap<T>(data: SetupNodeData<T>) {\n  nodes.set(data.node, data.nodeData);\n\n  data.parentData.config.plugins?.forEach((plugin: DNDPlugin) => {\n    plugin(data.parent)?.setupNodeRemap?.(data);\n  });\n}\n\nfunction reapplyDragClasses<T>(node: Node, parentData: ParentData<T>) {\n  if (!state) return;\n\n  const dropZoneClass =\n    \"clonedDraggedNode\" in state\n      ? parentData.config.touchDropZoneClass\n      : parentData.config.dropZoneClass;\n\n  if (state.draggedNode.el !== node) return;\n\n  addNodeClass([node], dropZoneClass, true);\n}\n\nexport function tearDownNodeRemap<T>(data: TearDownNodeData<T>) {\n  data.parentData.config.plugins?.forEach((plugin: DNDPlugin) => {\n    plugin(data.parent)?.tearDownNodeRemap?.(data);\n  });\n}\n\nexport function tearDownNode<T>(data: TearDownNodeData<T>) {\n  data.parentData.config.plugins?.forEach((plugin: DNDPlugin) => {\n    plugin(data.parent)?.tearDownNode?.(data);\n  });\n\n  data.node.draggable = false;\n\n  if (data.nodeData?.abortControllers?.mainNode)\n    data.nodeData?.abortControllers?.mainNode.abort();\n}\n\n/**\n * Called when the nodes of a given parent element are mutated.\n *\n * @param mutationList - The list of mutations.\n *\n * @returns void\n *\n * @internal\n */\nfunction nodesMutated(mutationList: MutationRecord[]) {\n  const parentEl = mutationList[0].target;\n\n  if (!(parentEl instanceof HTMLElement)) return;\n\n  remapNodes(parentEl);\n}\n\n/**\n * Remaps the data of the parent element's children.\n *\n * @param parent - The parent element.\n *\n * @returns void\n *\n * @internal\n */\nexport function remapNodes<T>(parent: HTMLElement, force?: boolean) {\n  const parentData = parents.get(parent);\n\n  if (!parentData) return;\n\n  parentData.privateClasses = Array.from(parent.classList);\n\n  const enabledNodes: Array<Node> = [];\n\n  const config = parentData.config;\n\n  for (let x = 0; x < parent.children.length; x++) {\n    const node = parent.children[x];\n\n    if (!isNode(node)) continue;\n\n    const nodeData = nodes.get(node);\n\n    // Only tear down the node if we have explicitly called dragAndDrop\n    if (force || !nodeData) {\n      config.tearDownNode({ node, parent, nodeData, parentData });\n    }\n\n    if (config.disabled) continue;\n\n    if (!config.draggable || (config.draggable && config.draggable(node))) {\n      enabledNodes.push(node);\n    }\n  }\n\n  if (\n    enabledNodes.length !== parentData.getValues(parent).length &&\n    !config.disabled\n  ) {\n    console.warn(\n      \"The number of enabled nodes does not match the number of values.\"\n    );\n\n    return;\n  }\n\n  if (parentData.config.treeGroup && !parentData.config.treeAncestor) {\n    let nextAncestorEl = parent.parentElement;\n\n    let eventDispatched = false;\n\n    while (nextAncestorEl) {\n      if (!parents.has(nextAncestorEl as HTMLElement)) {\n        nextAncestorEl = nextAncestorEl.parentElement;\n\n        continue;\n      }\n\n      nextAncestorEl.dispatchEvent(\n        new CustomEvent(\"hasNestedParent\", {\n          detail: {\n            parent: { data: parentData, el: parent },\n          },\n        })\n      );\n\n      eventDispatched = true;\n\n      nextAncestorEl = null;\n    }\n\n    if (!eventDispatched) console.warn(\"No ancestor found for tree group\");\n  }\n\n  const values = parentData.getValues(parent);\n\n  const enabledNodeRecords: Array<NodeRecord<T>> = [];\n\n  for (let x = 0; x < enabledNodes.length; x++) {\n    const node = enabledNodes[x];\n\n    const prevNodeData = nodes.get(node);\n\n    const nodeData = Object.assign(\n      prevNodeData ?? {\n        privateClasses: [],\n        abortControllers: {},\n      },\n      {\n        value: values[x],\n        index: x,\n      }\n    );\n\n    // TODO: maybe get rid of this — duplicate of the next if statement\n    if (state && nodeData.value === state.draggedNode.data.value) {\n      state.draggedNode.data = nodeData;\n\n      state.draggedNode.el = node;\n    }\n\n    if (\n      state &&\n      state.draggedNodes.map((x) => x.data.value).includes(nodeData.value)\n    ) {\n      const draggedNode = state.draggedNodes.find(\n        (x) => x.data.value === nodeData.value\n      );\n\n      if (draggedNode) draggedNode.el = node;\n    }\n\n    enabledNodeRecords.push({\n      el: node,\n      data: nodeData,\n    });\n\n    const setupNodeData = {\n      node,\n      parent,\n      parentData,\n      nodeData,\n    };\n\n    if (force || !prevNodeData) config.setupNode(setupNodeData);\n\n    setupNodeRemap(setupNodeData);\n  }\n\n  parents.set(parent, { ...parentData, enabledNodes: enabledNodeRecords });\n\n  config.remapFinished(parentData);\n\n  parentData.config.plugins?.forEach((plugin: DNDPlugin) => {\n    plugin(parent)?.remapFinished?.();\n  });\n}\n\nexport function remapFinished() {\n  if (state) {\n    state.remapJustFinished = true;\n\n    state.affectedNodes = [];\n  }\n}\n\nexport function handleDragstart<T>(data: NodeEventData<T>) {\n  if (!(data.e instanceof DragEvent)) return;\n\n  if (!data.targetData.parent.data.config.nativeDrag) {\n    data.e.preventDefault();\n\n    return;\n  }\n\n  dragstart({\n    e: data.e,\n    targetData: data.targetData,\n  });\n}\n\nexport function handlePointerdown<T>(eventData: NodePointerEventData<T>) {\n  eventData.e.stopPropagation();\n\n  pointerdown({\n    e: eventData.e,\n    targetData: eventData.targetData,\n  });\n}\n\nexport function dragstartClasses(\n  el: HTMLElement | Node | Element,\n  draggingClass: string | undefined,\n  dropZoneClass: string | undefined,\n  dragPlaceholderClass: string | undefined\n) {\n  addNodeClass([el], draggingClass);\n\n  setTimeout(() => {\n    removeClass([el], draggingClass);\n\n    addNodeClass([el], dragPlaceholderClass);\n\n    addNodeClass([el], dropZoneClass);\n  });\n}\n\nexport function initDrag<T>(eventData: NodeDragEventData<T>): DragState<T> {\n  const dragState = setDragState(dragStateProps(eventData));\n\n  eventData.e.stopPropagation();\n\n  if (eventData.e.dataTransfer) {\n    eventData.e.dataTransfer.dropEffect = \"move\";\n\n    eventData.e.dataTransfer.effectAllowed = \"move\";\n\n    eventData.e.dataTransfer.setDragImage(\n      eventData.targetData.node.el,\n      eventData.e.offsetX,\n      eventData.e.offsetY\n    );\n  }\n\n  dragState.clonedDraggedNode = undefined;\n\n  return dragState;\n}\n\nexport function validateDragHandle<T>(data: NodeEventData<T>): boolean {\n  if (!(data.e instanceof DragEvent) && !(data.e instanceof PointerEvent))\n    return false;\n\n  const config = data.targetData.parent.data.config;\n\n  if (!config.dragHandle) return true;\n\n  const dragHandles = data.targetData.node.el.querySelectorAll(\n    config.dragHandle\n  );\n\n  if (!dragHandles) return false;\n\n  const coordinates = data.e;\n\n  const elFromPoint = config.root.elementFromPoint(\n    coordinates.x,\n    coordinates.y\n  );\n\n  if (!elFromPoint) return false;\n\n  for (const handle of Array.from(dragHandles)) {\n    if (elFromPoint === handle || handle.contains(elFromPoint)) return true;\n  }\n\n  return false;\n}\n\nexport function pointerdown<T>(data: NodePointerEventData<T>) {\n  if (!validateDragHandle(data)) return;\n\n  const dragState = initSyntheticDrag(data);\n\n  handleSyntheticDraggedNode(data, dragState);\n\n  handleLongPress(data, dragState);\n}\n\nexport function handleSyntheticDraggedNode<T>(\n  data: NodePointerEventData<T>,\n  dragState: DragState<T>\n) {\n  dragState.draggedNodeDisplay = dragState.draggedNode.el.style.display;\n\n  const rect = data.targetData.node.el.getBoundingClientRect();\n\n  if (!dragState.clonedDraggedNode) return;\n\n  dragState.clonedDraggedNode.style.cssText = `\n            width: ${rect.width}px;\n            position: fixed;\n            top: -9999px;\n            pointer-events: none;\n            z-index: 999999;\n            display: none;\n          `;\n\n  document.body.append(dragState.clonedDraggedNode);\n\n  copyNodeStyle(data.targetData.node.el, dragState.clonedDraggedNode);\n\n  dragState.clonedDraggedNode.style.display = \"none\";\n\n  console.log(data.e.pointerId);\n\n  dragState.draggedNode.el.setPointerCapture(data.e.pointerId);\n\n  document.addEventListener(\"contextmenu\", noDefault);\n}\n\nexport function dragstart<T>(data: NodeDragEventData<T>) {\n  if (!validateDragHandle(data)) {\n    data.e.preventDefault();\n\n    return;\n  }\n\n  const config = data.targetData.parent.data.config;\n\n  const dragState = initDrag(data);\n\n  const originalZIndex = data.targetData.node.el.style.zIndex;\n\n  dragState.originalZIndex = originalZIndex;\n\n  data.targetData.node.el.style.zIndex = \"9999\";\n\n  dragstartClasses(\n    dragState.draggedNode.el,\n    config.draggingClass,\n    config.dropZoneClass,\n    config.dragPlaceholderClass\n  );\n\n  if (config.onDragstart)\n    config.onDragstart({\n      parent: data.targetData.parent,\n      values: parentValues(\n        data.targetData.parent.el,\n        data.targetData.parent.data\n      ),\n      draggedNode: dragState.draggedNode,\n      draggedNodes: dragState.draggedNodes,\n      position: dragState.initialIndex,\n    });\n}\n\nexport function handlePointeroverNode<T>(e: PointeroverNodeEvent<T>) {\n  if (!state) return;\n\n  if (e.detail.targetData.parent.el === state.lastParent.el)\n    sort(e.detail, state);\n  else transfer(e.detail, state);\n}\n\nexport function handleEnd<T>(eventData: NodeEventData<T>) {\n  if (!state) return;\n\n  end(eventData, state);\n\n  resetState();\n}\n\nexport function end<T>(_eventData: NodeEventData<T>, state: DragState<T>) {\n  document.removeEventListener(\"contextmenu\", noDefault);\n\n  if (\"longPressTimeout\" in state && state.longPressTimeout)\n    clearTimeout(state.longPressTimeout);\n\n  const config = parents.get(state.initialParent.el)?.config;\n\n  const isSynth = \"clonedDraggedNode\" in state && state.clonedDraggedNode;\n\n  const dropZoneClass = isSynth\n    ? config?.touchDropZoneClass\n    : config?.dropZoneClass;\n\n  if (state.originalZIndex !== undefined)\n    state.draggedNode.el.style.zIndex = state.originalZIndex;\n\n  addNodeClass(\n    state.draggedNodes.map((x) => x.el),\n    dropZoneClass,\n    true\n  );\n\n  removeClass(\n    state.draggedNodes.map((x) => x.el),\n    dropZoneClass\n  );\n\n  if (config?.longTouchClass) {\n    removeClass(\n      state.draggedNodes.map((x) => x.el),\n      state.initialParent.data?.config?.longTouchClass\n    );\n  }\n\n  if (isSynth && state.clonedDraggedNode) state.clonedDraggedNode.remove();\n\n  if (config?.onDragend)\n    config.onDragend({\n      parent: state.lastParent,\n      values: parentValues(state.lastParent.el, state.lastParent.data),\n      draggedNode: state.draggedNode,\n      draggedNodes: state.draggedNodes,\n      position: state.initialIndex,\n    });\n}\n\nexport function handleTouchstart<T>(eventData: NodeEventData<T>) {\n  eventData.e.preventDefault();\n}\n\nexport function handlePointermove<T>(eventData: NodePointerEventData<T>) {\n  if (!state || isNative) return;\n\n  syntheticMove(eventData, state);\n}\n\nfunction initSyntheticDrag<T>(data: NodePointerEventData<T>) {\n  data.e.stopPropagation();\n\n  const syntheticDragState = setDragState(dragStateProps(data));\n\n  return syntheticDragState;\n}\n\nexport function handleLongPress<T>(\n  data: NodePointerEventData<T>,\n  dragState: DragState<T>\n) {\n  const config = data.targetData.parent.data.config;\n\n  if (!config.longPress) return;\n\n  dragState.longPressTimeout = setTimeout(() => {\n    if (!dragState) return;\n\n    dragState.longPress = true;\n\n    if (config.longPressClass && data.e.cancelable)\n      addNodeClass(\n        dragState.draggedNodes.map((x) => x.el),\n        config.longPressClass\n      );\n\n    data.e.preventDefault();\n  }, config.longPressTimeout || 200);\n}\n\nfunction pointermoveClasses<T>(\n  dragState: DragState<T>,\n  config: ParentConfig<T>\n) {\n  if (config.longTouchClass)\n    removeClass(\n      dragState.draggedNodes.map((x) => x.el),\n      config?.longTouchClass\n    );\n\n  if (config.touchDraggingClass && dragState.clonedDraggedNode)\n    addNodeClass([dragState.clonedDraggedNode], config.touchDraggingClass);\n\n  if (config.touchDropZoneClass)\n    addNodeClass(\n      dragState.draggedNodes.map((x) => x.el),\n      config.touchDropZoneClass\n    );\n}\n\nfunction getScrollData<T>(state?: DragState<T>): ScrollData<T> | void {\n  if (!state || !state.scrollParent) return;\n\n  // If the scrollParent is the document and it isn't a touch event, then\n  // we can just let the browser handle the scrolling.\n  if (\n    state.scrollParent === document.documentElement &&\n    !(\"clonedDraggedNode\" in state)\n  ) {\n    return;\n  }\n\n  const { x, y, width, height } = state.scrollParent.getBoundingClientRect();\n\n  const {\n    x: xThresh,\n    y: yThresh,\n    scrollOutside,\n  } = state.lastParent.data.config.scrollBehavior;\n\n  return {\n    state,\n    xThresh,\n    yThresh,\n    scrollOutside,\n    scrollParent: state.scrollParent,\n    x,\n    y,\n    width,\n    height,\n  };\n}\n\nfunction shouldScroll<T>(direction: string): DragState<T> | void {\n  const data = getScrollData(state);\n\n  if (!data) return;\n\n  switch (direction) {\n    case \"down\":\n      return shouldScrollDown(data.state, data);\n\n    case \"up\":\n      return shouldScrollUp(data.state, data);\n\n    case \"right\":\n      return shouldScrollRight(data.state, data);\n\n    case \"left\":\n      return shouldScrollLeft(data.state, data);\n  }\n}\n\nfunction shouldScrollRight<T>(\n  state: DragState<T> | DragState<T>,\n  data: ScrollData<T>\n): DragState<T> | DragState<T> | void {\n  const diff = data.scrollParent.clientWidth + data.x - state.coordinates.x;\n\n  if (!data.scrollOutside && diff < 0) return;\n\n  if (\n    diff < (1 - data.xThresh) * data.scrollParent.clientWidth &&\n    !(\n      data.scrollParent.scrollLeft + data.scrollParent.clientWidth >=\n      data.scrollParent.scrollWidth\n    )\n  )\n    return state;\n}\n\nfunction shouldScrollLeft<T>(\n  state: DragState<T>,\n  data: ScrollData<T>\n): DragState<T> | void {\n  const diff = data.scrollParent.clientWidth + data.x - state.coordinates.x;\n\n  if (!data.scrollOutside && diff > data.scrollParent.clientWidth) return;\n\n  if (\n    diff > data.xThresh * data.scrollParent.clientWidth &&\n    data.scrollParent.scrollLeft !== 0\n  )\n    return state;\n}\n\nfunction shouldScrollUp<T>(\n  state: DragState<T>,\n  data: ScrollData<T>\n): DragState<T> | void {\n  const diff = data.scrollParent.clientHeight + data.y - state.coordinates.y;\n\n  if (!data.scrollOutside && diff > data.scrollParent.clientHeight) return;\n\n  if (\n    diff > data.yThresh * data.scrollParent.clientHeight &&\n    data.scrollParent.scrollTop !== 0\n  )\n    return state;\n}\n\nfunction shouldScrollDown<T>(\n  state: DragState<T>,\n  data: ScrollData<T>\n): DragState<T> | void {\n  const diff = data.scrollParent.clientHeight + data.y - state.coordinates.y;\n  if (!data.scrollOutside && diff < 0) return;\n\n  if (\n    diff < (1 - data.yThresh) * data.scrollParent.clientHeight &&\n    !(\n      data.scrollParent.scrollTop + data.scrollParent.clientHeight >=\n      data.scrollParent.scrollHeight\n    )\n  )\n    return state;\n}\n\nfunction moveNode<T>(data: NodePointerEventData<T>, dragState: DragState<T>) {\n  if (!dragState.clonedDraggedNode) return;\n\n  if (!dragState.pointerMoved) {\n    if (data.targetData.parent.data.config.onDragstart)\n      data.targetData.parent.data.config.onDragstart({\n        parent: data.targetData.parent,\n        values: parentValues(\n          data.targetData.parent.el,\n          data.targetData.parent.data\n        ),\n        draggedNode: dragState.draggedNode,\n        draggedNodes: dragState.draggedNodes,\n        position: dragState.initialIndex,\n      });\n  }\n\n  dragState.pointerMoved = true;\n\n  dragState.clonedDraggedNode.style.display =\n    dragState.draggedNodeDisplay || \"\";\n\n  const { x, y } = eventCoordinates(data.e);\n\n  console.log(\"event coordinates\", data.e);\n\n  dragState.coordinates.y = y;\n\n  dragState.coordinates.x = x;\n\n  const startLeft = dragState.startLeft ?? 0;\n\n  const startTop = dragState.startTop ?? 0;\n\n  dragState.clonedDraggedNode.style.left = `${x - startLeft}px`;\n\n  dragState.clonedDraggedNode.style.top = `${y - startTop}px`;\n\n  if (data.e.cancelable) data.e.preventDefault();\n\n  pointermoveClasses(dragState, data.targetData.parent.data.config);\n}\n\nfunction syntheticMove<T>(\n  data: NodePointerEventData<T>,\n  dragState: DragState<T>\n) {\n  dragState.draggedNode.el.setPointerCapture(data.e.pointerId);\n\n  const config = data.targetData.parent.data.config;\n\n  if (config.longPress && !dragState.longPress) {\n    clearTimeout(dragState.longPressTimeout);\n\n    return;\n  }\n\n  if (data.e.cancelable) data.e.preventDefault();\n\n  moveNode(data, dragState);\n\n  handleScroll();\n\n  const elFromPoint = getElFromPoint(data);\n\n  if (!elFromPoint) return;\n\n  const pointerMoveEventData = {\n    e: data.e,\n    targetData: elFromPoint,\n  };\n\n  if (\"node\" in elFromPoint) {\n    elFromPoint.node.el.dispatchEvent(\n      new CustomEvent(\"handlePointeroverNode\", {\n        detail: pointerMoveEventData,\n      })\n    );\n  } else {\n    elFromPoint.parent.el.dispatchEvent(\n      new CustomEvent(\"handlePointeroverParent\", {\n        detail: pointerMoveEventData,\n      })\n    );\n  }\n}\n\nexport function handleScroll() {\n  for (const direction of Object.keys(scrollConfig)) {\n    const [x, y] = scrollConfig[direction];\n    performScroll(direction, x, y);\n  }\n}\n\nfunction performScroll(direction: string, x: number, y: number) {\n  const state = shouldScroll(direction);\n\n  if (!state) return;\n\n  state.scrollParent.scrollBy(x, y);\n\n  setTimeout(\n    () => {\n      performScroll(direction, x, y);\n    },\n    \"clonedDraggedNode\" in state ? 10 : 100\n  );\n}\n\nexport function handleDragoverNode<T>(data: NodeDragEventData<T>) {\n  if (!state) return;\n\n  const { x, y } = eventCoordinates(data.e);\n\n  state.coordinates.y = y;\n\n  state.coordinates.x = x;\n\n  handleScroll();\n\n  dragoverNode(data, state);\n}\n\nexport function handleDragoverParent<T>(data: ParentEventData<T>) {\n  if (!state) return;\n\n  const { x, y } = eventCoordinates(data.e as DragEvent);\n\n  state.coordinates.y = y;\n\n  state.coordinates.x = x;\n\n  handleScroll();\n\n  transfer(data, state);\n}\n\nexport function handlePointeroverParent<T>(e: PointeroverParentEvent<T>) {\n  if (!state) return;\n\n  transfer(e.detail, state);\n}\n\nexport function validateTransfer<T>(\n  data: ParentEventData<T>,\n  state: DragState<T>\n) {\n  if (data.targetData.parent.el === state.lastParent.el) return false;\n\n  const targetConfig = data.targetData.parent.data.config;\n\n  if (\n    targetConfig.treeGroup &&\n    state.draggedNode.el.contains(data.targetData.parent.el)\n  ) {\n    return false;\n  }\n\n  if (targetConfig.dropZone === false) return false;\n\n  const initialParentConfig = state.initialParent.data.config;\n\n  if (targetConfig.accepts) {\n    return targetConfig.accepts(\n      data.targetData.parent,\n      state.initialParent,\n      state.lastParent,\n      state\n    );\n  } else if (\n    !targetConfig.group ||\n    targetConfig.group !== initialParentConfig.group\n  ) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction handleDragenterNode<T>(\n  data: NodeDragEventData<T>,\n  _state: DragState<T>\n) {\n  data.e.preventDefault();\n}\n\nfunction handleDragleaveNode<T>(\n  data: NodeDragEventData<T>,\n  _state: DragState<T>\n) {\n  data.e.preventDefault();\n}\n\nfunction dragoverNode<T>(\n  eventData: NodeDragEventData<T>,\n  dragState: DragState<T>\n) {\n  eventData.e.preventDefault();\n\n  eventData.e.stopPropagation();\n\n  eventData.targetData.parent.el === dragState.lastParent?.el\n    ? sort(eventData, dragState)\n    : transfer(eventData, dragState);\n}\n\nexport function validateSort<T>(\n  data: NodeDragEventData<T> | NodePointerEventData<T>,\n  state: DragState<T>,\n  x: number,\n  y: number\n): boolean {\n  if (\n    state.affectedNodes\n      .map((x) => x.data.value)\n      .includes(data.targetData.node.data.value)\n  ) {\n    return false;\n  }\n\n  if (state.remapJustFinished) {\n    state.remapJustFinished = false;\n\n    if (\n      data.targetData.node.data.value === state.lastTargetValue ||\n      state.draggedNodes.map((x) => x.el).includes(data.targetData.node.el)\n    ) {\n      state.lastTargetValue = data.targetData.node.data.value;\n    }\n\n    return false;\n  }\n\n  if (state.preventEnter) return false;\n\n  if (state.draggedNodes.map((x) => x.el).includes(data.targetData.node.el)) {\n    state.lastTargetValue = undefined;\n    return false;\n  }\n\n  if (data.targetData.node.data.value === state.lastTargetValue) return false;\n\n  if (\n    data.targetData.parent.el !== state.lastParent?.el ||\n    data.targetData.parent.data.config.sortable === false\n  )\n    return false;\n\n  const targetRect = data.targetData.node.el.getBoundingClientRect();\n\n  const dragRect = state.draggedNode.el.getBoundingClientRect();\n\n  const yDiff = targetRect.y - dragRect.y;\n\n  const xDiff = targetRect.x - dragRect.x;\n\n  let incomingDirection: \"above\" | \"below\" | \"left\" | \"right\";\n\n  if (Math.abs(yDiff) > Math.abs(xDiff)) {\n    incomingDirection = yDiff > 0 ? \"above\" : \"below\";\n  } else {\n    incomingDirection = xDiff > 0 ? \"left\" : \"right\";\n  }\n\n  const threshold = state.lastParent.data.config.threshold;\n\n  switch (incomingDirection) {\n    case \"left\":\n      if (x > targetRect.x + targetRect.width * threshold.horizontal) {\n        state.incomingDirection = \"left\";\n\n        return true;\n      }\n      break;\n\n    case \"right\":\n      if (x < targetRect.x + targetRect.width * (1 - threshold.horizontal)) {\n        state.incomingDirection = \"right\";\n\n        return true;\n      }\n      break;\n\n    case \"above\":\n      if (y > targetRect.y + targetRect.height * threshold.vertical) {\n        state.incomingDirection = \"above\";\n\n        return true;\n      }\n      break;\n\n    case \"below\":\n      if (y < targetRect.y + targetRect.height * (1 - threshold.vertical)) {\n        state.incomingDirection = \"below\";\n\n        return true;\n      }\n      break;\n\n    default:\n      break;\n  }\n\n  return false;\n}\n\nexport function sort<T>(\n  data: NodeDragEventData<T> | NodePointerEventData<T>,\n  state: DragState<T>\n) {\n  const { x, y } = eventCoordinates(data.e);\n\n  if (!validateSort(data, state, x, y)) return;\n\n  const range =\n    state.draggedNode.data.index > data.targetData.node.data.index\n      ? [data.targetData.node.data.index, state.draggedNode.data.index]\n      : [state.draggedNode.data.index, data.targetData.node.data.index];\n\n  state.targetIndex = data.targetData.node.data.index;\n\n  state.affectedNodes = data.targetData.parent.data.enabledNodes.filter(\n    (node) => {\n      return (\n        range[0] <= node.data.index &&\n        node.data.index <= range[1] &&\n        node.el !== state.draggedNode.el\n      );\n    }\n  );\n\n  data.targetData.parent.data.config.performSort(state, data);\n}\n\n/**\n * Event listener used for all nodes.\n *\n * @param e - The event.\n *\n */\nexport function nodeEventData<T>(\n  callback: any\n): (e: Event) => NodeEventData<T> | undefined {\n  function nodeTargetData(node: Node): NodeTargetData<T> | undefined {\n    const nodeData = nodes.get(node);\n\n    const parent = node.parentNode || state?.lastParent?.el;\n\n    if (!nodeData) return;\n\n    const parentData = parents.get(parent);\n\n    if (!parentData) return;\n\n    return {\n      node: {\n        el: node,\n        data: nodeData,\n      },\n      parent: {\n        el: parent,\n        data: parentData as ParentData<T>,\n      },\n    };\n  }\n\n  return (e: Event) => {\n    const targetData = nodeTargetData(e.currentTarget as Node);\n\n    if (!targetData) return;\n\n    return callback({\n      e,\n      targetData,\n    });\n  };\n}\n\n/**\n * Used when the dragged element enters into a parent other than its own.\n *\n * @param eventData\n *\n * @param state\n *\n * @internal\n *\n * @returns void\n */\nexport function transfer<T>(\n  data: NodeEventData<T> | ParentEventData<T>,\n  state: DragState<T>\n): void {\n  if (!validateTransfer(data, state)) return;\n\n  data.targetData.parent.data.config.performTransfer(state, data);\n\n  state.lastParent = data.targetData.parent;\n\n  state.transferred = true;\n}\n\nexport function parentEventData<T>(\n  callback: any\n): (e: Event) => NodeEventData<T> | undefined {\n  function parentTargetData(\n    parent: HTMLElement\n  ): ParentTargetData<T> | undefined {\n    const parentData = parents.get(parent);\n\n    if (!parentData) return;\n\n    return {\n      parent: {\n        el: parent,\n        data: parentData as ParentData<T>,\n      },\n    };\n  }\n\n  return (e: Event) => {\n    const targetData = parentTargetData(e.currentTarget as HTMLElement);\n\n    if (!targetData) return;\n\n    return callback({\n      e,\n      targetData,\n    });\n  };\n}\n"],"mappings":"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","names":["className","events","handleEnd","state","handleEnd","draggedParentValues","state","parentValues","x","parentValues","handleDragoverNode","handleEnd","state","handleEnd","handleDragoverParent","handleDragoverNode","handlePointeroverParent","handleEnd","dragoverNode","state","dragStateProps","handleDragstart","handleDragoverNode","handleDragoverParent","handlePointeroverNode","handlePointeroverParent","state","data","lastParentValues","targetParentValues","targetIndex","parent","x","dragoverNode"]}